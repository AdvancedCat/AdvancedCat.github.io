<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying my idea</title>
  
  <subtitle>Welcome to my sweet home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-23T04:08:18.147Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xin Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript真值表</title>
    <link href="http://yoursite.com/2018/01/23/Javascript%E7%9C%9F%E5%80%BC%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/01/23/Javascript真值表/</id>
    <published>2018-01-23T03:21:37.000Z</published>
    <updated>2018-01-23T04:08:18.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS真值表"><a href="#JS真值表" class="headerlink" title="JS真值表"></a>JS真值表</h1><svg id="rAndEOp" width="970" height="920"><g transform="translate(120,120)"><text class="xLabel" transform="translate(4, -4) rotate(90)" style="text-anchor: end;">null</text><text class="xLabel" transform="translate(26, -4) rotate(90)" style="text-anchor: end;">undefined</text><text class="xLabel" transform="translate(48, -4) rotate(90)" style="text-anchor: end;">false</text><text class="xLabel" transform="translate(70, -4) rotate(90)" style="text-anchor: end;">“false”</text><text class="xLabel" transform="translate(92, -4) rotate(90)" style="text-anchor: end;">Boolean(false)</text><text class="xLabel" transform="translate(114, -4) rotate(90)" style="text-anchor: end;">[]</text><text class="xLabel" transform="translate(136, -4) rotate(90)" style="text-anchor: end;">[[]]</text><text class="xLabel" transform="translate(158, -4) rotate(90)" style="text-anchor: end;">“”</text><text class="xLabel" transform="translate(180, -4) rotate(90)" style="text-anchor: end;">String(“”)</text><text class="xLabel" transform="translate(202, -4) rotate(90)" style="text-anchor: end;">0</text><text class="xLabel" transform="translate(224, -4) rotate(90)" style="text-anchor: end;">Number(0)</text><text class="xLabel" transform="translate(246, -4) rotate(90)" style="text-anchor: end;">“0”</text><text class="xLabel" transform="translate(268, -4) rotate(90)" style="text-anchor: end;">String(“0”)</text><text class="xLabel" transform="translate(290, -4) rotate(90)" style="text-anchor: end;">[0]</text><text class="xLabel" transform="translate(312, -4) rotate(90)" style="text-anchor: end;">true</text><text class="xLabel" transform="translate(334, -4) rotate(90)" style="text-anchor: end;">“true”</text><text class="xLabel" transform="translate(356, -4) rotate(90)" style="text-anchor: end;">Boolean(true)</text><text class="xLabel" transform="translate(378, -4) rotate(90)" style="text-anchor: end;">1</text><text class="xLabel" transform="translate(400, -4) rotate(90)" style="text-anchor: end;">Number(1)</text><text class="xLabel" transform="translate(422, -4) rotate(90)" style="text-anchor: end;">“1”</text><text class="xLabel" transform="translate(444, -4) rotate(90)" style="text-anchor: end;">String(“1”)</text><text class="xLabel" transform="translate(466, -4) rotate(90)" style="text-anchor: end;">[1]</text><text class="xLabel" transform="translate(488, -4) rotate(90)" style="text-anchor: end;">-1</text><text class="xLabel" transform="translate(510, -4) rotate(90)" style="text-anchor: end;">Number(-1)</text><text class="xLabel" transform="translate(532, -4) rotate(90)" style="text-anchor: end;">“-1”</text><text class="xLabel" transform="translate(554, -4) rotate(90)" style="text-anchor: end;">String(“-1”)</text><text class="xLabel" transform="translate(576, -4) rotate(90)" style="text-anchor: end;">[-1]</text><text class="xLabel" transform="translate(598, -4) rotate(90)" style="text-anchor: end;">Infinity</text><text class="xLabel" transform="translate(620, -4) rotate(90)" style="text-anchor: end;">-Infinity</text><text class="xLabel" transform="translate(642, -4) rotate(90)" style="text-anchor: end;">Object()</text><text class="xLabel" transform="translate(664, -4) rotate(90)" style="text-anchor: end;">NaN</text><text class="yLabel" transform="translate(-4, 16)" style="text-anchor: end;">null</text><text class="yLabel" transform="translate(-4, 38)" style="text-anchor: end;">undefined</text><text class="yLabel" transform="translate(-4, 60)" style="text-anchor: end;">false</text><text class="yLabel" transform="translate(-4, 82)" style="text-anchor: end;">“false”</text><text class="yLabel" transform="translate(-4, 104)" style="text-anchor: end;">Boolean(false)</text><text class="yLabel" transform="translate(-4, 126)" style="text-anchor: end;">[]</text><text class="yLabel" transform="translate(-4, 148)" style="text-anchor: end;">[[]]</text><text class="yLabel" transform="translate(-4, 170)" style="text-anchor: end;">“”</text><text class="yLabel" transform="translate(-4, 192)" style="text-anchor: end;">String(“”)</text><text class="yLabel" transform="translate(-4, 214)" style="text-anchor: end;">0</text><text class="yLabel" transform="translate(-4, 236)" style="text-anchor: end;">Number(0)</text><text class="yLabel" transform="translate(-4, 258)" style="text-anchor: end;">“0”</text><text class="yLabel" transform="translate(-4, 280)" style="text-anchor: end;">String(“0”)</text><text class="yLabel" transform="translate(-4, 302)" style="text-anchor: end;">[0]</text><text class="yLabel" transform="translate(-4, 324)" style="text-anchor: end;">true</text><text class="yLabel" transform="translate(-4, 346)" style="text-anchor: end;">“true”</text><text class="yLabel" transform="translate(-4, 368)" style="text-anchor: end;">Boolean(true)</text><text class="yLabel" transform="translate(-4, 390)" style="text-anchor: end;">1</text><text class="yLabel" transform="translate(-4, 412)" style="text-anchor: end;">Number(1)</text><text class="yLabel" transform="translate(-4, 434)" style="text-anchor: end;">“1”</text><text class="yLabel" transform="translate(-4, 456)" style="text-anchor: end;">String(“1”)</text><text class="yLabel" transform="translate(-4, 478)" style="text-anchor: end;">[1]</text><text class="yLabel" transform="translate(-4, 500)" style="text-anchor: end;">-1</text><text class="yLabel" transform="translate(-4, 522)" style="text-anchor: end;">Number(-1)</text><text class="yLabel" transform="translate(-4, 544)" style="text-anchor: end;">“-1”</text><text class="yLabel" transform="translate(-4, 566)" style="text-anchor: end;">String(“-1”)</text><text class="yLabel" transform="translate(-4, 588)" style="text-anchor: end;">[-1]</text><text class="yLabel" transform="translate(-4, 610)" style="text-anchor: end;">Infinity</text><text class="yLabel" transform="translate(-4, 632)" style="text-anchor: end;">-Infinity</text><text class="yLabel" transform="translate(-4, 654)" style="text-anchor: end;">Object()</text><text class="yLabel" transform="translate(-4, 676)" style="text-anchor: end;">NaN</text><rect y="0" x="0" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="0" x="22" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="0" x="44" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="0" x="88" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="110" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="132" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="154" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="176" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="198" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="220" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="242" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="264" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="286" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="0" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="0" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="0" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="22" x="22" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="22" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="110" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="132" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="154" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="176" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="242" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="264" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="286" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="418" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="440" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="462" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="528" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="550" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="572" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="44" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="44" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="44" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="88" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="44" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="66" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="66" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="66" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="638" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="88" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="44" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="88" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="88" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="88" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="110" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="110" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="110" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="110" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="110" x="132" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="110" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="110" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="110" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="110" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="132" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="132" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="132" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="110" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="132" x="132" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="132" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="132" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="132" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="132" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="154" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="154" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="154" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="154" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="154" x="176" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="154" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="154" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="154" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="154" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="176" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="176" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="176" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="154" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="176" x="176" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="176" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="176" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="176" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="176" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="198" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="198" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="198" x="220" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="198" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="220" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="198" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="220" x="220" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="220" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="242" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="242" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="242" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="242" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="242" x="264" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="242" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="264" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="264" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="264" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="242" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="264" x="264" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="264" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="286" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="286" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="286" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="286" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="286" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="308" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="308" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="352" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="308" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="308" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="66" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="330" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="330" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="638" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="308" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="352" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="352" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="352" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="352" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="374" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="374" x="396" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="374" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="374" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="374" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="396" x="396" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="396" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="396" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="418" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="418" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="418" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="418" x="440" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="418" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="440" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="440" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="418" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="440" x="440" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="440" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="462" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="462" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="462" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="462" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="110" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="132" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="154" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="176" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="484" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="484" x="506" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="484" x="528" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="484" x="550" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="484" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="484" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="484" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="110" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="132" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="154" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="176" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="484" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="506" x="506" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="506" x="528" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="506" x="550" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="506" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="506" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="506" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="528" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="528" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="484" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="528" x="506" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="528" x="528" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="528" x="550" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="528" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="528" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="550" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="550" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="484" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="550" x="506" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="550" x="528" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="550" x="550" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="550" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="550" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="572" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="572" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="484" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="506" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="528" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="550" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="572" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="572" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="308" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="352" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="374" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="396" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="594" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="594" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="110" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="132" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="154" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="176" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="484" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="506" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="616" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="616" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="638" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="638" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="638" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="638" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="110" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="132" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="154" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="176" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="242" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="264" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="286" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="418" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="440" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="462" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="528" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="550" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="572" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><g class="legend" transform="translate(722, 0)"><rect width="30" height="30" style="fill: rgb(144, 43, 32);"/><text x="40" y="18" style="text-anchor: start;">===</text></g><g class="legend" transform="translate(722, 60)"><rect width="30" height="30" style="fill: rgb(235, 108, 95);"/><text x="40" y="18" style="text-anchor: start;">==</text></g><g class="legend" transform="translate(722, 120)"><rect width="30" height="30" style="fill: rgb(241, 196, 15);"/><text x="40" y="18" style="text-anchor: start;">&gt;= &amp;&amp; &lt;=</text></g><g class="legend" transform="translate(722, 180)"><rect width="30" height="30" style="fill: rgb(46, 204, 113);"/><text x="40" y="18" style="text-anchor: start;">&gt;=</text></g><g class="legend" transform="translate(722, 240)"><rect width="30" height="30" style="fill: rgb(52, 152, 219);"/><text x="40" y="18" style="text-anchor: start;">&lt;=</text></g><g class="legend" transform="translate(722, 300)"><rect width="30" height="30" style="fill: rgb(189, 195, 199);"/><text x="40" y="18" style="text-anchor: start;">else</text></g></g></svg><h1 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等 ==="></a>严格相等 <code>===</code></h1><p>两个被比较的值在比较前都不进行隐式转换。</p><p>对于除了数值之外的值，全等操作符使用明确的语义进行比较：一个值只与自身全等。</p><p>对于数值，全等操作符使用略加修改的语义来处理两个特殊情况：</p><ul><li>第一个情况是，浮点数 0 是不分正负的。区分 +0 和 -0 在解决一些特定的数学问题时是必要的，但是大部分情况下我们并不用关心。全等操作符认为这两个值是全等的。</li><li>第二个情况是，浮点数包含了 NaN 值，用来表示某些定义不明确的数学问题的解，例如：正无穷加负无穷。全等操作符认为 NaN 与其他任何值都不全等，包括它自己。（等式 (x !== x) 成立的唯一情况是 x 的值为 NaN）</li></ul><p>各个值的严格相等结果如上图棕色块所示。与自身严格相等或与构造函数返回的值严格相等<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"123"</span> === <span class="string">"123"</span></div><div class="line"><span class="string">"123"</span> === <span class="built_in">String</span>(<span class="string">"123"</span>)</div></pre></td></tr></table></figure></p><h1 id="非严格相等"><a href="#非严格相等" class="headerlink" title="非严格相等 =="></a>非严格相等 <code>==</code></h1><p>相等操作符比较两个值是否相等，在比较前将两个被比较的值转换为相同类型。在转换后（等式的一边或两边都可能被转换），最终的比较方式等同于全等操作符 === 的比较方式。</p><p>注意图上false与其他值得非严格相等结果，<code>XXX == false</code>有以下值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[] [[]] <span class="string">""</span> <span class="built_in">String</span>(<span class="string">""</span>) <span class="number">0</span> <span class="built_in">Number</span>(<span class="number">0</span>) <span class="built_in">String</span>(<span class="string">"0"</span>) [<span class="number">0</span>]</div></pre></td></tr></table></figure></p><h1 id="逻辑“非”运算符"><a href="#逻辑“非”运算符" class="headerlink" title="逻辑“非”运算符 !"></a>逻辑“非”运算符 !</h1><p>先看看在规范中逻辑非运算符做了什么事情，<a href="http://www.ecma-international.org/ecma-262/8.0/index.html#sec-logical-not-operator" target="_blank" rel="external">在这里</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UnaryExpression:!UnaryExpression</div><div class="line">Let expr be the result <span class="keyword">of</span> evaluating UnaryExpression.</div><div class="line">Let oldValue be ToBoolean(? GetValue(expr)).</div><div class="line">If oldValue is <span class="literal">true</span>, <span class="keyword">return</span> <span class="literal">false</span>.</div><div class="line">Return <span class="literal">true</span>.</div></pre></td></tr></table></figure></p><p>清晰明了，关键运算在ToBealean函数，我们看看它<a href="http://www.ecma-international.org/ecma-262/8.0/index.html#sec-toboolean" target="_blank" rel="external">做了什么</a>：<br>它提供了一个结果表格：</p><table><thead><tr><th style="text-align:left">参数类型</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">Undefined</td><td style="text-align:left">Return false.</td></tr><tr><td style="text-align:left">Null</td><td style="text-align:left">Return false.</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">Return argument.</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">If argument is +0, -0, or NaN, return false; otherwise return true.</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">If argument is the empty String (its length is zero), return false; otherwise return true.</td></tr><tr><td style="text-align:left">Symbol</td><td style="text-align:left">Return true.</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">Return true.</td></tr></tbody></table><p>总结一下，凡是<code>undefined</code>,<code>null</code>返回false<br>凡是<code>Symbol</code>,<code>Object</code>返回true</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS真值表&quot;&gt;&lt;a href=&quot;#JS真值表&quot; class=&quot;headerlink&quot; title=&quot;JS真值表&quot;&gt;&lt;/a&gt;JS真值表&lt;/h1&gt;&lt;svg id=&quot;rAndEOp&quot; width=&quot;970&quot; height=&quot;920&quot;&gt;&lt;g transform=&quot;tran
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM元素排序</title>
    <link href="http://yoursite.com/2017/12/29/DOM%E5%85%83%E7%B4%A0%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/12/29/DOM元素排序/</id>
    <published>2017-12-29T11:53:56.000Z</published>
    <updated>2017-12-29T12:19:09.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>如何给页面中已存在的DOM元素排序？</p><ol><li>表格中有一些数据，希望按照某些规则进行排序</li><li>父元素下的子元素排序<br>等等…</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这个问题的关键是如何以最小的代价去操作这些dom，我们都知道直接操作页面DOM是很耗时的行为，因为操作一次页面DOM就会引发<a href="/2017/12/19/重排与重绘/">重排或重绘</a>.那么如何设计解决这个问题。</p><ul><li>必须要缓存读取的DOM集合，在JS中完成排序，之后再写会页面中</li><li>最好能直接用已存在的DOM填充到父元素中，不要使用新建DOM的方式</li><li>以最少的标记来标识已存在DOM如何做移动</li></ul><h1 id="关键函数sortElements"><a href="#关键函数sortElements" class="headerlink" title="关键函数sortElements"></a>关键函数sortElements</h1><p>根据以上设想，写出以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortElements</span>(<span class="params">childs, comparator</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span>(!childs.length || <span class="keyword">typeof</span> comparator !== <span class="string">'function'</span>)&#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sort = [].sort</div><div class="line"><span class="keyword">var</span> map = [].map</div><div class="line"></div><div class="line"><span class="keyword">var</span> placements = map.call(childs,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> ownDom = item</div><div class="line"><span class="keyword">var</span> parentNode = ownDom.parentNode</div><div class="line"><span class="keyword">var</span> nextSibling = parentNode.insertBefore(</div><div class="line"><span class="built_in">document</span>.createTextNode(<span class="string">''</span>),</div><div class="line">ownDom.nextSibling</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">parentNode.insertBefore(<span class="keyword">this</span>, nextSibling)</div><div class="line">parentNode.removeChild(nextSibling)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 这里有个坑，childs其实是NodeList对象，不是真的数组，需要将它转成数组才能调用后续的sort,map</span></div><div class="line"><span class="keyword">var</span> sorted = sort.call([].slice.call(childs), comparator)</div><div class="line">map.call(sorted, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123;</div><div class="line">placements[idx].call(item)</div><div class="line">&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>comparator</code>需要用户指定，用于判断dom谁先谁后</p><p>在参考资料中列出了上面使用到的原生API</p><p>完整DEMO<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>子节点排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clickSortElement()"</span>&gt;</span>点击排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">clickSortElement</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> childDoms = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.parent li'</span>)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">sortElements(childDoms, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> aIndex = +a.getAttribute(<span class="string">'data-index'</span>)</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> bIndex = +b.getAttribute(<span class="string">'data-index'</span>)</span></div><div class="line"><span class="javascript"><span class="keyword">return</span> aIndex &gt; bIndex ? <span class="number">1</span> : <span class="number">-1</span> </span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">sortElements</span>(<span class="params">childs, comparator</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">if</span>(!childs.length || <span class="keyword">typeof</span> comparator !== <span class="string">'function'</span>)&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">return</span></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> sort = [].sort</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> map = [].map</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> placements = map.call(childs,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> ownDom = item</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> parentNode = ownDom.parentNode</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> nextSibling = parentNode.insertBefore(</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.createTextNode(<span class="string">''</span>),</span></div><div class="line"><span class="undefined">ownDom.nextSibling</span></div><div class="line"><span class="undefined">)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">parentNode.insertBefore(<span class="keyword">this</span>, nextSibling)</span></div><div class="line"><span class="undefined">parentNode.removeChild(nextSibling)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">// 这里有个坑，childs其实是NodeList对象，不是真的数组，需要将它转成数组才能调用后续的sort,map</span></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> sorted = sort.call([].slice.call(childs), comparator)</span></div><div class="line"><span class="javascript">map.call(sorted, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123;</span></div><div class="line"><span class="undefined">placements[idx].call(item)</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore" target="_blank" rel="external">insertBefore</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createTextNode" target="_blank" rel="external">createTextNode</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/removeChild" target="_blank" rel="external">removeChild</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nextSibling" target="_blank" rel="external">nextSibling</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="external">querySelectorAll</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;如何给页面中已存在的DOM元素排序？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表格中有一些数据，希望按照某些规则进行排序&lt;/li&gt;
&lt;li&gt;父元素下的子元
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>CSS Modules</title>
    <link href="http://yoursite.com/2017/12/27/CSS-Modules/"/>
    <id>http://yoursite.com/2017/12/27/CSS-Modules/</id>
    <published>2017-12-27T14:28:26.000Z</published>
    <updated>2017-12-28T02:25:34.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><p>我们在开发页面的时候，经常是需要写一些样式文件的。自从React，Vue兴起后，组件化开发日益火热。<br>组件化开发过程中，我们编程思维颗粒度更细，在写样式时，仅仅会针对这个单独组件，难免会与其他的组件样式冲突，导致重名样式覆盖。<br>比如，A组件有个<code>title</code>样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而在B组件中也有同名<code>title</code>样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当在同一页面中使用A B组件时，样式就会冲突。</p><p>那么有没有什么好的办法解决这个问题呢？</p><p>有一种css组织方式——<a href="https://en.bem.info/methodology/css/" target="_blank" rel="external">BEM</a>,为每个class起一个有意义的名称，尽可能避免重名问题。但是，它的命名过于繁琐和冗长，虽然便于管理，但是对开发者而言不够友好。</p><p>试试CSS Modules吧</p><h1 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a><a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">CSS Modules</a></h1><p>CSS Modules是一个样式文件，这个样式文件中所有样式类（class）和动画名称默认都是本地作用域的。通过模块引入的方式访问。</p><blockquote><p>注意，CSS Modules只对样式类做转换，即如果你配合webpack使用后，它会把样式类以base64形式转换。如果在CSS Modules中使用id选择器、伪类、标签选择器，它不会做任何转换</p></blockquote><p>CSS Modules引入了模块依赖和局部作用域的概念，让css文件以模块的方式引入.这与webpack的思想不谋而合，在webpack中，所以资源都是模块，并且webpack中也可以针对模块使用不同的loader处理资源。</p><p>我们先看看，CSS Module的基本内容，再看看搭配webpack如何做到css模块的引入。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>CSS Modules提倡使用驼峰式书写类名，但并不是强制的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bannerBg</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样做的原因是，如果你使用了react或者vue，那么你通过引入样式文件就一切很自然了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// For React</span></div><div class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./style.css'</span></div><div class="line"></div><div class="line">&lt;App className=&#123;style.bannerBg&#125; /&gt;</div></pre></td></tr></table></figure></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在CSS Modules中，有本地作用域和全局作用域之分，使用<code>:local()</code>和<code>:global()</code>标识，默认情况下都是本地作用域的<br>如果在全局作用域下，其他组件也可以访问到样式类名<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.normal</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 以上与下面等价 */</span></div><div class="line"><span class="selector-pseudo">:local(.normal)</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 定义全局样式 */</span></div><div class="line"><span class="selector-pseudo">:global(.btn)</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 定义多个全局样式 */</span></div><div class="line"><span class="selector-pseudo">:global</span> &#123;</div><div class="line">  .link &#123;</div><div class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">green</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">color</span>: yellow;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>允许开发者自由组合多个样式类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.className</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">  <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">  <span class="attribute">composes</span>: className;</div><div class="line">  <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面<code>otherClassName</code>组合了<code>className</code>的属性，但自身<code>color</code>会覆盖其他类<code>className</code>的同名属性。<br><code>otherClassName</code>必须在之前声明好。</p><p>可以组合多个类<code>composes: classNameA classNameB;</code></p><p>也可以组合全局类,以及组合来自其他文件的类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">  <span class="attribute">composes</span>: globalClassName from global;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">  <span class="attribute">composes</span>: className from <span class="string">'./another.css'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>知道了CSS Modules的内容，当然需要用它，不然学它做什么(黑人问号脸…)</p><p>我们以React为例，使用webpack进行打包。首先如果需要开启CSS Modules，我们需要在webpack中声明：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">...</div><div class="line"><span class="built_in">module</span>:&#123;</div><div class="line">    loaders: [&#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">"style-loader!css-loader?modules"</span></div><div class="line">    &#125;]</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>一个App组件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// style.css</div><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> style <span class="keyword">from</span> <span class="string">'./style.css'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        &lt;h1 className=&#123;style.title&#125;&gt;&lt;/h1&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当我们访问页面时，这个组件内部<code>h1</code>标签的变成了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"_3zyde4l1yATCOkgn-DBWEL"</span>&gt;</span></div><div class="line">  Hello World</div><div class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>h1</code>的class属性值变成了base64编码，这样就避免了样式的重名。</p><p>更多的用例，你可以看一下阮大神的博文——<a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html" target="_blank" rel="external">CSS Modules</a></p><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><p>既然有个规范，那就有一些使用的约定，非强制性的约定，但使用后还是很有好处的。</p><ul><li>不使用选择器，只使用 class 名来定义样式</li><li>不层叠多个 class，只使用一个 class 把所有样式定义好</li><li>所有样式通过 composes 组合来实现复用</li><li>不嵌套</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">CSS Modules</a></li><li><a href="https://zhuanlan.zhihu.com/purerender/20495964" target="_blank" rel="external">CSS Modules 详解及 React 中实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h1&gt;&lt;p&gt;我们在开发页面的时候，经常是需要写一些样式文件的。自从React，Vue兴起后，组件化开发日益火热。&lt;br&gt;组件化开发过程中，我们编程思维颗
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>伸缩盒——Flex</title>
    <link href="http://yoursite.com/2017/12/26/%E4%BC%B8%E7%BC%A9%E7%9B%92%E2%80%94%E2%80%94Flex/"/>
    <id>http://yoursite.com/2017/12/26/伸缩盒——Flex/</id>
    <published>2017-12-26T07:35:34.000Z</published>
    <updated>2018-01-12T03:11:12.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FlexBox"><a href="#FlexBox" class="headerlink" title="FlexBox"></a>FlexBox</h1><p>Flex,全拼Flexible Box 伸缩盒，是CSS3推出的新的布局方式。让盒模型具有更大的灵活性。</p><h1 id="Flex属性"><a href="#Flex属性" class="headerlink" title="Flex属性"></a>Flex属性</h1><p>一个伸缩盒由两个部分组成：Flex容器和Flex项目。容器即父元素，项目即子元素。它们的关系可以参照下面这张图：<br><img src="/img/flexbox/Flex容器与Flex项目的关系.png" alt=""></p><p>Flex有比较多的属性，以下思维导图罗列2013最新版本的属性写法和可选值:<br><img src="/img/flexbox/Flexbox属性思维导图.png" alt=""></p><p>我们针对两个部分对主要属性分析一下</p><h1 id="Flex容器"><a href="#Flex容器" class="headerlink" title="Flex容器"></a>Flex容器</h1><h2 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex"></a>display: flex</h2><p>当我们使用伸缩盒时，先要给父元素指定<code>display:flex;</code>或<code>display:inline-flex</code>的样式，让父元素触发FFC（伸缩格式化上下文），它的作用和BFC元素一致。（BFC特性：浮动不会闯入伸缩容器，且伸缩容器的边界不会与其内容边界叠加）</p><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p><code>flex-direction</code>用来指定伸缩盒主轴的方向，即Flex项目的排布方向</p><ul><li>row: 默认值， 主轴的方向为从左至右</li><li>row-reverse: 主轴的方向为从右至左</li><li>column: 主轴方向从上至下</li><li>column-reverse: 主轴方向从下至上</li></ul><p><img src="//css-tricks.com/wp-content/uploads/2013/04/flex-direction2.svg" alt=""></p><h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p><code>flex-wrap</code>属性控制伸缩盒是单行还是多行的，也决定了换行时侧轴的方向（新的一行的堆放方向）</p><ul><li>flex-wrap:nowrap;伸缩容器单行显示，默认值；</li><li>flex-wrap:wrap;伸缩容器多行显示；伸缩项目每一行的排列顺序由上到下依次。</li><li>flex-wrap:wrap-reverse;伸缩容器多行显示，但是伸缩项目每一行的排列顺序由下到上依次排列。</li></ul><p><img src="//css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg" alt=""></p><h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p><code>flex-flow</code>是<code>flex-direction</code>和<code>flex-wrap</code>的合并缩写<br>参数为上面罗列的可选参数<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-box</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-flow</span>: column wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p><code>justify-content</code>决定了Flex项目在主轴方向的对齐方式。<br>如果Flex项目未填充满一行，该属性会起作用，它会对多出的空间进行分配。</p><ul><li>justify-content:flex-start;<br>伸缩项目向主轴的起始位置开始对齐，后面的每元素紧挨着前一个元素对齐。</li><li>justify-content:flex-end;<br>伸缩项目向主轴的结束位置对齐，前面的每一个元素紧挨着后一个元素对齐。</li><li>justify-content:center;<br>伸缩项目相互对齐并在主轴上面处于居中，并且第一个元素到主轴起点的距离等于最后一个元素到主轴终点的位置。以上3中都是“捆绑”在一个分别靠左、靠右、居中对齐。</li><li>justify-content:space-between;<br>伸缩项目平均的分配在主轴上面，并且第一个元素和主轴的起点紧挨，最后一个元素和主轴上终点紧挨，中间剩下的伸缩项目在确保两两间隔相等的情况下进行平分。</li><li>justify-content:space-around;<br>伸缩项目平均的分布在主轴上面，并且第一个元素到主轴起点距离和最后一个元素到主轴终点的距离相等，且等于中间元素两两的间距的一半。完美的平均分配，这个布局在阿里系中很常见。</li></ul><p><img src="https://cdn.css-tricks.com/wp-content/uploads/2013/04/justify-content-2.svg" alt=""></p><h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p><code>align-items</code>用来定义Flex项目在侧轴上的对齐方式</p><ul><li>align-items:flex-start;<br>伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起点的边。</li><li>align-items:flex-end;<br>伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边。</li><li>align-items:center;<br>伸缩项目的外边距在侧轴上居中放置。</li><li>align-items:baseline;<br>如果伸缩项目的行内轴与侧轴为同一条，则该值与[flex-start]等效。 其它情况下，该值将参与基线对齐。</li><li>align-items:stretch;<br>伸缩项目拉伸填充整个伸缩容器。此值会使项目的外边距盒的尺寸在遵照「min/max-width/height」属性的限制下尽可能接近所在行的尺寸。</li></ul><p><img src="https://cdn.css-tricks.com/wp-content/uploads/2014/05/align-items.svg" alt=""></p><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p><code>align-content</code>用来定义Flex项目多行时在侧轴上的对齐方式。<br>当<code>flex-wrap:nowrap;</code>时，该属性没有效果</p><ul><li>align-content: stretch;<br>默认值,各行将会伸展以占用剩余的空间。</li><li>其他可以参考[justify-content]用法</li></ul><p><img src="//css-tricks.com/wp-content/uploads/2013/04/align-content.svg" alt=""></p><h1 id="Flex项目"><a href="#Flex项目" class="headerlink" title="Flex项目"></a>Flex项目</h1><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><code>order</code>属性可以指定Flex项目在容器中排列顺序。默认情况下，Flex项目会按照自身在文档流中顺序显示。使用<code>order</code>可以改变Flex项目的顺序。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-item</span>&#123;</div><div class="line">    order: &lt;integer&gt;; // default is 0</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="//css-tricks.com/wp-content/uploads/2013/04/order-2.svg" alt=""></p><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p><code>flex-grow</code>主要用来决定伸缩容器剩余空间（正值）按比例应扩展多少空间<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-item</span>&#123;</div><div class="line">    flex-grow: &lt;number&gt;; // default 0</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="//css-tricks.com/wp-content/uploads/2014/05/flex-grow.svg" alt=""></p><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><code>flex-shrink</code>主要用来决定当Flex项目累加长度唱过容器长度时，如何对Flex项目进行收缩处理.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-item</span>&#123;</div><div class="line">    flex-shrink: &lt;number&gt;; // default 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p><code>flex-basis</code>默认是auto也就是根据可伸缩比率计算出剩余空间的分布之前，伸缩项目主轴长度的起始数值。<br>若在「flex」缩写省略了此部件，则「flex-basis」的指定值是长度零</p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p><code>flex</code>属性是以上三个属性（flex-grow, flex-shrink, flex-basis）的简写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-item</span>&#123;</div><div class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p><code>align-self</code>用来在单独的伸缩项目上覆写默认的对齐方式，这个属性是用来覆盖伸缩容器属性align-items对每一行的对齐方式。也就是说在默认的情况下这两个值是相等的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-item</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="//css-tricks.com/wp-content/uploads/2014/05/align-self.svg" alt=""></p><h1 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h1><p>下图是从CANIUSE中截取的Flexbox在各个浏览器兼容性情况：<br><img src="/img/flexbox/Flexbox浏览器兼容性.png" alt=""></p><p>从图中看出目前flexbox在PC端主流浏览器中支持度较高，IE系除了10、11部分支持外，其他均不支持。<br>在移动端个别浏览器不支持最新flex语法，需要使用旧版语法。<br>同时针对不同内核需要书写属性前缀：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-</span></div><div class="line"><span class="selector-tag">-mos-</span></div><div class="line"><span class="selector-tag">-ms-</span></div></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank" rel="external">W3C-Flex</a> : CSS Flexible Box Layout Module Level 1</li><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">Flex guide</a> : A Complete Guide to Flexbox</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/%E5%BC%B9%E6%80%A7%E6%A1%86%E7%9A%84%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80" target="_blank" rel="external">MDN - Flex</a> : 使用弹性盒子进行高级布局</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FlexBox&quot;&gt;&lt;a href=&quot;#FlexBox&quot; class=&quot;headerlink&quot; title=&quot;FlexBox&quot;&gt;&lt;/a&gt;FlexBox&lt;/h1&gt;&lt;p&gt;Flex,全拼Flexible Box 伸缩盒，是CSS3推出的新的布局方式。让盒模型具有更大的灵活
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>重排与重绘</title>
    <link href="http://yoursite.com/2017/12/19/%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98/"/>
    <id>http://yoursite.com/2017/12/19/重排与重绘/</id>
    <published>2017-12-19T02:34:13.000Z</published>
    <updated>2017-12-29T12:19:09.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重排重绘？"><a href="#重排重绘？" class="headerlink" title="重排重绘？"></a>重排重绘？</h1><p>当浏览器将静态资源（一般指css、js和字体）加载完成后，会维护两个内部数据结构————<strong>DOM树</strong> 和 <strong>渲染树</strong>。</p><p>DOM树和渲染树合并为一个DOM渲染树，DOM渲染树上标记每个DOM的外观和位置属性，浏览器依据这棵树计算出每个DOM的位置大小外观等信息，之后依照这些信息将节点绘制在页面中。</p><p>隐藏的DOM不会出现在DOM渲染树中，浏览器不会去渲染它。</p><p>由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。</p><p>在CSS中，我们知道每个节点都是一个盒模型，无论通过css或者js改变了这个盒子的属性，都会导致盒子的状态发生变化。浏览器检测到盒子变化后，就会将这种变化即使反应到页面中，一般现代浏览器都比较聪明，会将若干次的变化合并为一次来改变页面。<br>触发这种页面变化的就是重排和重绘。</p><p><strong>重绘</strong> ： 是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。</p><p><strong>重排</strong> ： 当DOM的变化影响了元素的几何属性（宽或高），浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为重排。重排一定伴随着重绘。</p><p>从上面得知，重排必定会触发重绘，因此减少重排的次数可以有效提高浏览器效率。</p><h1 id="影响重排的操作"><a href="#影响重排的操作" class="headerlink" title="影响重排的操作"></a>影响重排的操作</h1><p>当DOM的几何因素发生变化时，就会触发重排，DOM几何变化有以下几种：</p><ol><li>DOM的<code>width,height,padding,border,margin,line-height</code>属性发生变化时，都会发生重排。如果DOM的其他属性的变化使得它的位置和大小也发生了变化，如调整字体大小因此高度变化，必定也会发生重排。DOM的动画也会影响重排。</li><li>DOM树的结构发生变化，这个肯定是触发重排的，没得商量。</li><li>浏览器大小发生变化。浏览器的resize会影响到页面内容的布局。</li></ol><h1 id="提高浏览器效率"><a href="#提高浏览器效率" class="headerlink" title="提高浏览器效率"></a>提高浏览器效率</h1><p>为了能让浏览器更快的显示页面，一般做到尽量减少重绘次数、减少重排次数、缩小重排的影响范围</p><ol><li><p>合并多次操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ele.style.cssText = <span class="string">'margin-top:20px;padding: 0 10px;'</span></div></pre></td></tr></table></figure></li><li><p>如果某个dom频繁触发重排，将它设置为<code>absolute或fixed或float</code>,这样它脱离了文档流，尽可能减少它对其他dom的影响。例如动画类的dom使用绝对定位是最好的。</p></li><li>由于隐藏的元素不在DOM渲染树中，因此针对频繁更新位置和外观的DOM，可以先将它隐藏，之后完成更新后，再显示出来。这样仅触发两次重排。但这个方式有个缺点，会导致页面的忽闪。</li><li>在内存中多次操作节点，完成后再添加到文档中去（可使用fragment元素）。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。</li></ol><p>那么问题来了，如果面试官问你“如何给一个大量数据的表格排序”，你要怎么回答？</p><p>另一个有趣的问题：如何快速让一个元素的子元素逆序展示？<br>给出两个用CSS解决的方法</p><ul><li>使用css3 的 <code>scaleY()</code>方法<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;div id="top-to-bottom"&gt;</div><div class="line">&lt;div id="a"&gt;A&lt;/div&gt;</div><div class="line">&lt;div id="b"&gt;B&lt;/div&gt;</div><div class="line">&lt;div id="c"&gt;C&lt;/div&gt;</div><div class="line">&lt;div id="d"&gt;D&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-id">#top-to-bottom</span> &#123;</div><div class="line"><span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line"><span class="attribute">text-align</span>: left;</div><div class="line"><span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(-1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(-1);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-id">#top-to-bottom</span> &gt; <span class="selector-tag">div</span> &#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line"><span class="attribute">float</span>: right;</div><div class="line"><span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(-1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(-1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>原理是父元素倒置，子元素也倒置一次，负负得正。</p><ul><li>使用flexbox布局<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>缺点目前flexbox在不同浏览器中实现程度不同</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重排重绘？&quot;&gt;&lt;a href=&quot;#重排重绘？&quot; class=&quot;headerlink&quot; title=&quot;重排重绘？&quot;&gt;&lt;/a&gt;重排重绘？&lt;/h1&gt;&lt;p&gt;当浏览器将静态资源（一般指css、js和字体）加载完成后，会维护两个内部数据结构————&lt;strong&gt;DOM树&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TODO List</title>
    <link href="http://yoursite.com/2017/12/18/TODO-List/"/>
    <id>http://yoursite.com/2017/12/18/TODO-List/</id>
    <published>2017-12-18T09:06:58.000Z</published>
    <updated>2018-01-23T08:26:30.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待研究的课题"><a href="#待研究的课题" class="headerlink" title="待研究的课题"></a>待研究的课题</h1><ul><li>浏览器渲染的过程，静态资源请求时的阻塞问题和优化，静态资源和动态资源</li><li>JS事件中<code>e.target</code>与<code>e.currentTarget</code>的区别</li><li>Promise原理</li><li>讲述一次项目的设计</li><li>探究多个setTimeout产生的微任务先后</li><li>H5新特性</li><li>XMLHttpRequest</li><li>做一个演示BFC的小应用</li><li>Array.prototype.sort稳定性分析，以及在不同浏览器下表现如何</li></ul><h1 id="待了解"><a href="#待了解" class="headerlink" title="待了解"></a>待了解</h1><ul><li>RAIL  谷歌网页理论</li><li><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">FastClick</a>  移动端300ms延迟的问题</li><li>移动端事件节流，避免重复调用，设置16ms间隔，避免移动端页面卡顿</li><li>Chrome-dev Performance</li><li>协议缓存</li><li>Cookie学问</li><li>百度m站， localStorage缓存静态资源</li></ul><h1 id="已解决的课题"><a href="#已解决的课题" class="headerlink" title="已解决的课题"></a>已解决的课题</h1><ul><li>关于Flex的一些概念 <a href="/2017/12/26/伸缩盒——Flex/">传送门</a></li><li>CSS Modules <a href="/2017/12/27/CSS-Modules/">传送门</a></li><li>Hexo支持的Markdown语法 <a href="/2017/01/28/Markdown语法-Hexo">传送门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;待研究的课题&quot;&gt;&lt;a href=&quot;#待研究的课题&quot; class=&quot;headerlink&quot; title=&quot;待研究的课题&quot;&gt;&lt;/a&gt;待研究的课题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;浏览器渲染的过程，静态资源请求时的阻塞问题和优化，静态资源和动态资源&lt;/li&gt;
&lt;li&gt;JS事件
      
    
    </summary>
    
    
      <category term="TODO" scheme="http://yoursite.com/tags/TODO/"/>
    
  </entry>
  
  <entry>
    <title>JS的单线程与异步</title>
    <link href="http://yoursite.com/2017/12/18/JS%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2017/12/18/JS的单线程与异步/</id>
    <published>2017-12-18T06:41:56.000Z</published>
    <updated>2017-12-19T02:41:23.875Z</updated>
    
    <content type="html"><![CDATA[<p>我们常说JavaScript是单线程的，那么应该怎么来认识这句话呢？它和异步又是什么关系呢？</p><h1 id="单线程与异步"><a href="#单线程与异步" class="headerlink" title="单线程与异步"></a>单线程与异步</h1><p>在一门语言中，单线程和异步是自相矛盾的。JS本身是单线程的，那么它就不是异步。但是，万事都有个但是，它的宿主环境是多线程的。JS常见的宿主环境是浏览器或Node端，宿主环境让JS通过某种方式（事件驱动）拥有了异步的行为。因为事件驱动让JS的机制非常简单高效。</p><h1 id="浏览器宿主"><a href="#浏览器宿主" class="headerlink" title="浏览器宿主"></a>浏览器宿主</h1><p>在各个宿主环境中，仅仅分配一个主线程给JS引擎去执行任何或函数，且一次只能执行一个任务。那么在浏览器里充满很多不同任务，且大多任务是非常耗时的，比如网络请求，定时器和事件监听。如果只让一个线程去完成的话，显然很容易阻塞。因此浏览器为这些耗时任务开辟了另外的线程，主要包括http请求线程，浏览器定时触发器，浏览器事件触发线程。如下图：<br><img src="/img/JS宿主浏览器环境.jpg" alt=""><br>浏览器内存常驻线程：</p><ul><li>浏览器 GUI 渲染线程</li><li>JavaScript 引擎线程</li><li>浏览器定时触发器线程</li><li>浏览器事件触发线程</li><li>浏览器 http 异步请求线程</li></ul><h1 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h1><p>那既然只有一个主线程在跑JS引擎，那么其他线程的任务完成后如何通知主线程呢？答案是回调函数，整个程序都是事件驱动的，每个事件都会绑定一个回调函数，比如如下的定时器任务：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'定时结束'</span>)</div><div class="line">&#125;, <span class="number">50</span>)</div></pre></td></tr></table></figure></p><p>首先JS主线程读取到setTimeout，会将这个任务交给浏览器定时触发器异步执行，当50ms过去后，浏览器定时触发器会再将回调函数重新压入任务队列的最后。其他异步任务也是如此，整个程序就是依靠这样一个个事件驱动起来的。所以说，JS一直都是单线程的，而浏览器才是实现异步的真正“主谋”</p><h1 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h1><p>上面我们说到了三个东西：JS主线程、任务队列、浏览器多线程。那么它们之间有什么关系呢？下面的图可以看出它们的关系：<br><img src="/img/JS主线程任务队列.jpg" alt=""><br>(图片摘自Philip Roberts的演讲《Help, I’m stuck in an event-loop》)<br>图片中<code>heap+stack</code>构成JS引擎主线程，<code>callback queue</code>是任务队列，<code>Web APIs</code>则是上面提到的浏览器异步任务线程。<br>函数的执行就是通过进栈和出栈实现的，比如图中有一个foo()函数，主线程把它推入栈中，在执行函数体时，发现还需要执行上面的那几个函数，所以又把这几个函数推入栈中，等到函数执行完，就让函数出栈。等到stack清空时，说明一个任务已经执行完了，这时就会从callback queue中寻找下一个人任务推入栈中（这个寻找的过程，叫做event loop，因为它总是循环的查找任务队列里是否还有任务）。</p><h1 id="如何利用异步"><a href="#如何利用异步" class="headerlink" title="如何利用异步"></a>如何利用异步</h1><p>浏览器维护了五个常驻线程，那么我们是否可以利用一下呢？答案是可以的，比如我们书写的同步代码是一个比较耗时的，比如遍历一个很大的数组，那么可以利用：</p><ul><li><p>定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// f1是一个非常耗时的过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// f1 的代码</span></div><div class="line">        callback();</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">f1(f2);</div></pre></td></tr></table></figure></li><li><p>事件触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery可以为dom元素绑定自定义事件，而这个事件是由事件触发线程完成的</span></div><div class="line">$f1.on(<span class="string">'custom'</span>,f2);  <span class="comment">//这里绑定事件以jQuery写法为例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// f1的代码</span></div><div class="line">        $f1.trigger(<span class="string">'custom'</span>);</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><p>Q:ajax请求是不是异步的？<br>A:从上面我们知道，浏览器会为http请求单独开辟线程处理，因此ajax请求是异步的</p><p>Q:界面渲染线程与JS主线程的关系<br>A:界面渲染线程与JS主线程是互斥的，主线程在执行时，界面渲染线程就会被挂起。<br>在执行<script>中内容时，浏览器会切换到JavaScript引擎所在的线程，此时渲染引擎所在的线程会阻塞，故其后元素的解析和渲染会暂停。把<script>放到紧跟</body>之前的位置。这样就不会影响需要放到页面上的UI元素的解析了。这样的好处就是，用户能即使看到页面上的UI元素，而防止出现了浏览器白屏等现象。</p><p>Q:静态资源和动态资源<br>A:一般而言，html中通过script定义的资源属于静态资源，这些资源的请求会阻塞dom树的构建。而通过js的createElement方法塞入到html中的资源属于动态资源，这种资源的请求并不会阻塞浏览器的渲染（因为塞入到dom的script标签的async属性是true）。因此如果资源可以异步获取，就可以通过动态资源的形式加载。</p><p>参考资料：</p><ul><li>JavaScript的单线程和异步: <a href="https://zhuanlan.zhihu.com/p/23659122">https://zhuanlan.zhihu.com/p/23659122</a></li></ul></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们常说JavaScript是单线程的，那么应该怎么来认识这句话呢？它和异步又是什么关系呢？&lt;/p&gt;
&lt;h1 id=&quot;单线程与异步&quot;&gt;&lt;a href=&quot;#单线程与异步&quot; class=&quot;headerlink&quot; title=&quot;单线程与异步&quot;&gt;&lt;/a&gt;单线程与异步&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6——Generator函数学习笔记</title>
    <link href="http://yoursite.com/2017/12/16/ES6%E2%80%94%E2%80%94Generator%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/12/16/ES6——Generator函数学习笔记/</id>
    <published>2017-12-16T08:09:59.000Z</published>
    <updated>2017-12-16T10:25:23.334Z</updated>
    
    <content type="html"><![CDATA[<p>本文是学习阮一峰的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">《ECMAScript6 入门》</a>的学习笔记</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Generator函数是ES6提供的一种异步编程解决方案</p><p>Generator 函数是一个状态机，封装了多个内部状态。</p><p>执行 Generator 函数会返回一个遍历器对象(Iterator)，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> <span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> g = gen()</div><div class="line"><span class="comment">// g.next() 返回的是一个包含value 和 done 的对象</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: 2, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: 3, done: true&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: undefined, done: true&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> val <span class="keyword">of</span> g)&#123;</div><div class="line">    <span class="built_in">console</span>.log(val)   <span class="comment">// 1  2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p><p>由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。</p><p>遍历器对象的next方法的运行逻辑如下:<br>（1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。<br>（2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。<br>（3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。<br>（4）如果该函数没有return语句，则返回的对象的value属性值为undefined。</p><p>yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。yield只可以使用在Generator函数中，出现在普通函数体内报错.yield表达式如果用在另一个表达式之中，必须放在圆括号里面</p><p>除了for…of循环以外，扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。</p><p>next()、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换yield表达式。</p><blockquote><p>next()是将yield表达式替换成一个值。<br>throw()是将yield表达式替换成一个throw语句<br>return()是将yield表达式替换成一个return语句。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> x + y;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> gen = g(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">gen.next(); <span class="comment">// Object &#123;value: 3, done: false&#125;</span></div><div class="line"></div><div class="line">gen.next(<span class="number">1</span>); <span class="comment">// Object &#123;value: 1, done: true&#125;</span></div><div class="line"><span class="comment">// 相当于将 let result = yield x + y</span></div><div class="line"><span class="comment">// 替换成 let result = 1;</span></div><div class="line"></div><div class="line">gen.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>)); <span class="comment">// Uncaught Error: 出错了</span></div><div class="line"><span class="comment">// 相当于将 let result = yield x + y</span></div><div class="line"><span class="comment">// 替换成 let result = throw(new Error('出错了'));</span></div><div class="line"></div><div class="line">gen.return(<span class="number">2</span>); <span class="comment">// Object &#123;value: 2, done: true&#125;</span></div><div class="line"><span class="comment">// 相当于将 let result = yield x + y</span></div><div class="line"><span class="comment">// 替换成 let result = return 2;</span></div></pre></td></tr></table></figure><h1 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield*表达式"></a>yield*表达式</h1><p>使用<code>yield*</code>表达式，在一个Generator函数中调用另一个Generator函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello!'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</div><div class="line">  <span class="keyword">yield</span> inner();</div><div class="line">  <span class="keyword">yield</span> <span class="string">'close'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = outer1()</div><div class="line">gen.next().value <span class="comment">// "open"</span></div><div class="line">gen.next().value <span class="comment">// 返回一个遍历器对象</span></div><div class="line">gen.next().value <span class="comment">// "close"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'open'</span></div><div class="line">  <span class="keyword">yield</span>* inner()</div><div class="line">  <span class="keyword">yield</span> <span class="string">'close'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = outer2()</div><div class="line">gen.next().value <span class="comment">// "open"</span></div><div class="line">gen.next().value <span class="comment">// "hello!"</span></div><div class="line">gen.next().value <span class="comment">// "close"</span></div></pre></td></tr></table></figure></p><p>从语法角度看，如果yield表达式后面跟的是一个遍历器对象，需要在yield表达式后面加上星号，表明它<strong>返回的是一个遍历器对象</strong>。这被称为yield<em>表达式。<br>实际上，任何数据结构只要有 Iterator 接口，就可以被yield</em>遍历。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> read = (<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">  <span class="keyword">yield</span>* <span class="string">'hello'</span>;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">read.next().value <span class="comment">// "hello"</span></div><div class="line">read.next().value <span class="comment">// "h"  因为字符串原生支持遍历器</span></div></pre></td></tr></table></figure></p><h1 id="Generator函数的this"><a href="#Generator函数的this" class="headerlink" title="Generator函数的this"></a>Generator函数的this</h1><p>Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的prototype对象上的方法。但如果把g当作普通的构造函数，并不会生效，因为g返回的总是遍历器对象，而不是this对象。<br>Generator 函数也不能跟new命令一起用，会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是学习阮一峰的&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《ECMAScript6 入门》&lt;/a&gt;的学习笔记&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; 
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>静态方法额外参数传递——redux-thunk</title>
    <link href="http://yoursite.com/2017/12/15/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E9%A2%9D%E5%A4%96%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E2%80%94%E2%80%94redux-thunk/"/>
    <id>http://yoursite.com/2017/12/15/静态方法额外参数传递——redux-thunk/</id>
    <published>2017-12-15T03:47:37.000Z</published>
    <updated>2017-12-15T08:04:03.033Z</updated>
    
    <content type="html"><![CDATA[<p>今天来看一段仅有14行的代码，它在github上获得了7200+ star。它就是<a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="external">redux-thunk</a><br>redux-thunk的作用是为redux提供thunk中间件，使得延迟调用dispatch，完成异步请求等功能。</p><blockquote><p>何为thunk?<br>thunk是一种包裹一些稍后执行的表达式的函数</p></blockquote><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>先感受一下这14行的代码(v2.0)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</div><div class="line">thunk.withExtraArgument = createThunkMiddleware;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</div></pre></td></tr></table></figure></p><p>源码很简单，但是有一处让我觉得很不错。<br>首先createThunkMiddleware工厂函数作用是封装middleware，并返回它。但是我们希望在执行这个中间件的时候，能将额外的参数传递给action，同时这个额外参数希望用户自定义。<br>这时候可以给返回的这个中间添加静态方法<code>withExtraArgument</code>，指向工厂函数，这样就可以传入自定义参数的同时，返回中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(thunk.withExtraArgument(api))</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// later</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchUser</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState, api</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// you can use api here</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>react-redux需要配合redux的applyMiddleware一起使用，因此需要先看一下applyMiddleware的源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (...args) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> store = createStore(...args)</div><div class="line">    <span class="keyword">let</span> dispatch = store.dispatch</div><div class="line">    <span class="keyword">let</span> chain = []</div><div class="line"></div><div class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</div><div class="line">      getState: store.getState,</div><div class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</div><div class="line">    &#125;</div><div class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</div><div class="line">    dispatch = compose(...chain)(store.dispatch)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...store,</div><div class="line">      dispatch</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中compose的作用是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compose(a,b,c)(args) ==&gt; a(b(c(args)))</div></pre></td></tr></table></figure></p><p>applyMiddleware使用方法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(thunk)(createStore)</div><div class="line"><span class="keyword">const</span> store = createStoreWithMiddleware(reducer)</div></pre></td></tr></table></figure></p><p>配合双方的源码来看，thunk作为中间件，接受由上一个中间返回的dispatch,若只有thunk一个中间件的话，<code>next</code>即为<code>store.dispatch</code><br>一旦应用中分发了action，必定会一次执行每一个中间件。这样thunk就可以依据传进来的action的类别进行区分了，从而支持异步操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天来看一段仅有14行的代码，它在github上获得了7200+ star。它就是&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-thunk&lt;/a&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码阅读——Redux</title>
    <link href="http://yoursite.com/2017/12/14/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94Redux/"/>
    <id>http://yoursite.com/2017/12/14/源码阅读——Redux/</id>
    <published>2017-12-14T01:50:20.000Z</published>
    <updated>2017-12-15T03:29:11.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为Redux"><a href="#何为Redux" class="headerlink" title="何为Redux"></a>何为Redux</h1><p>Redux是一个为JavaScript应用设计的可预测状态容器。GitHub官网是<a href="https://github.com/reactjs/redux" target="_blank" rel="external">https://github.com/reactjs/redux</a><br>严格的单向数据流动是Redux架构的核心</p><h1 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h1><p>Redux遵循三大原则：</p><ol><li>单一数据源<br>整个应用的state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中。<br>也就是说整个应用只有一个store，读取数据都是从这个store中进行</li><li>State是只读的<br>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。<br>action的作用仅仅表达一种修改的意向，整个应用的修改操作都被集中起来。我们可以对action进行记录追踪，方便调试观察。</li><li>使用纯函数进行修改<br>为了描述 action 如何改变 state tree ，你需要编写 reducers。<br>Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回<strong>新的 state</strong>。</li></ol><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>分析Redux的源码是很有趣的事情，Redux的源码很少，打包压缩后仅有2KB左右。它封装了几个关键的函数，就是这些函数应用了函数式编程的技巧，封装了私有变量，造就了Redux的三大原则。<br>PS:本博客中不分析参数检查部分的代码，有兴趣的可以去gitbub上看看</p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>顾名思义，createStore函数返回一个store对象，store对象上会定义一些应用使用的钩子函数，帮助操作内部封装隐藏的state</p><p>源码如下（有删减）:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建一个Store，来维护一颗状态树</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; reducer        纯函数，接受state和action，触发相应事件</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; preloadedState 初始state</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; enhancer       给第三方中间件使用，在Redux中指的是applyMiddleware</span></div><div class="line"><span class="comment"> * @return &#123;[type]&#125;                返回store，暴露公开API用于读取state，分发action，注册事件</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</div><div class="line">  <span class="comment">// 类型检查...</span></div><div class="line"></div><div class="line">  <span class="comment">//  私有变量，外界尽可以通过暴露出的API函数去修改这些私有变量</span></div><div class="line">  <span class="keyword">let</span> currentReducer = reducer</div><div class="line">  <span class="keyword">let</span> currentState = preloadedState</div><div class="line">  <span class="keyword">let</span> currentListeners = []</div><div class="line">  <span class="keyword">let</span> nextListeners = currentListeners</div><div class="line">  <span class="keyword">let</span> isDispatching = <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="comment">// 确保对nextListeners的操作不会影响到currentListeners</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</div><div class="line">      nextListeners = currentListeners.slice()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取当前的状态</span></div><div class="line">  <span class="comment">// 事实上，我们仍可以通过引用的形式去修改内部的state。如果你这样做了，那你就从一开始就没想清楚去使用redux</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> currentState</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 注册事件，所有事件会push到listeners数组中，在触发dispatch时依次执行</span></div><div class="line">  <span class="comment">// subscribe返回解除listener的函数，这里用到了闭包</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</div><div class="line">    <span class="comment">// 类型检查...</span></div><div class="line">    <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></div><div class="line"></div><div class="line">    ensureCanMutateNextListeners()</div><div class="line">    nextListeners.push(listener)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      isSubscribed = <span class="literal">false</span></div><div class="line"></div><div class="line">      ensureCanMutateNextListeners()</div><div class="line">      <span class="keyword">const</span> index = nextListeners.indexOf(listener)</div><div class="line">      nextListeners.splice(index, <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 核心函数，分发action，这是唯一可以改变state的途径</span></div><div class="line">  <span class="comment">// 它会将state和action传给reducer纯函数，reducer执行完毕后返回新的state</span></div><div class="line">  <span class="comment">// 请记住，dispatch是你应用时刻关注的钩子函数。因为只有它才能真正触发修改state的行为</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">    <span class="comment">// 类型检查...</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      isDispatching = <span class="literal">true</span></div><div class="line">      currentState = currentReducer(currentState, action)</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      isDispatching = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> listeners = currentListeners = nextListeners</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</div><div class="line">      <span class="keyword">const</span> listener = listeners[i]</div><div class="line">      listener()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> action</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 替换reducer</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</div><div class="line">    <span class="comment">// 类型检查...</span></div><div class="line">    currentReducer = nextReducer</div><div class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 暴露API</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    dispatch,</div><div class="line">    subscribe,</div><div class="line">    getState,</div><div class="line">    replaceReducer</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><p>如果应用比较简单，我们可以只写一个reducer，将所有的action都集中到一处去，之后参数传给createStore.<br>但是随着应用越来越大，你可能有很多action，如果都放入一个reducer中，显然变得不可维护。于是期望可以拆分reducer，每个reducer仅关心store tree中某个分支（即state中部分key），且仅返回这部分分支内容。其他分支内容你并不关心。<br>为了解决这个问题，Reudex提供了combineReducers函数。<br>combineReducers接受一个reducers对象，每一个key对应了一个reducer，这个key之后也将反应到state中。<br>比如你有一个postListReducer，这个reducer专门用来处理博客列表相关的操作（增删改查），将<code>{postList: postListReducer}</code>传给combineReducers，你会得到<code>{postList: []}</code>的store。而postListReducer也仅能处理postList部分的数据，不用关心其他字段。</p><p>源码如下（有删减）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将包含多个reducer函数的对象转换为一个reducer函数</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; reducers [description]</span></div><div class="line"><span class="comment"> * @return &#123;[type]&#125;          [description]</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</div><div class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</div><div class="line">  <span class="comment">// 将有效的reducer汇集到一个最终对象中</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</div><div class="line">    <span class="keyword">const</span> key = reducerKeys[i]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</div><div class="line">      finalReducers[key] = reducers[key]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</div><div class="line"></div><div class="line">  <span class="comment">// 最终返回一个reducer函数，接受state和action参数</span></div><div class="line">  <span class="comment">// 它会遍历每一个之前传入的reducer，每个reducer仅会改变对应key的state</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></div><div class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</div><div class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</div><div class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</div><div class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</div><div class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</div><div class="line">      <span class="comment">// 每个reducer只管自己的一亩三分地</span></div><div class="line">      nextState[key] = nextStateForKey  <span class="comment">// 计算出的state会放入对应key中去</span></div><div class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey  <span class="comment">// 这里应对可能reducer返回原来的state</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p>在你使用Redux后，我们可以通过<code>store.dispatch(ActionCreator(...))</code>的形式去分发由ActionCreator生成的action。<br>我们知道，React很适合组件式开发，那么如果我们需要在子组件中去分发action的时候该如何做呢？可以这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Child &#123;...data&#125; dispatch=&#123;store.dispatch&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//在组件内部我们可以这样调用了</span></div><div class="line"><span class="keyword">this</span>.props.dispatch(action)</div></pre></td></tr></table></figure></p><p>这样做有一个问题，如果子组件嵌套较深，那么每个组件我都要传一个dispatch下去，我们希望使用redux时透明的，能否将dispatch保存在actioncreator中，当分发action时自动带出dispatch。答案是可以的，这里我们需要借助bindActionCreators函数来绑定dispatch<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    <span class="keyword">let</span> &#123;todos, dispatch&#125; = <span class="keyword">this</span>.props</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * &#123;</span></div><div class="line"><span class="comment">     *    add<span class="doctag">Todo:</span> Function,</span></div><div class="line"><span class="comment">     *    remove<span class="doctag">Todo:</span> Function</span></div><div class="line"><span class="comment">     * &#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">let</span> boundActionCreators = bindActionCreators(TodoActionCreators, dispatch)</div><div class="line"></div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        &lt;TodoList todos=&#123;todos&#125; &#123;...boundActionCreators&#125; /&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上例摘自<a href="http://cn.redux.js.org/docs/api/bindActionCreators.html" target="_blank" rel="external">Redux文档</a>中<br>在实际应用，我么也可以用的更灵活一些，比如借助<code>react-redux</code>中connect方法</p><p>源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将dispatch绑定到actionCreator函数中</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; actionCreators actionCreator函数或者actionCreator函数对象</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; dispatch       [description]</span></div><div class="line"><span class="comment"> * @return &#123;[type]&#125;                [description]</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</div><div class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</div><div class="line">    <span class="keyword">const</span> key = keys[i]</div><div class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</div><div class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> boundActionCreators</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段源码是比较简单的，大致意图是进一步封装actionCreator函数，通过闭包的形式将dispatch绑定到actionCreator中。从而使子组件不需要关心dispatch参数，直接分发action</p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>Middleware 可以让你包装 store 的 dispatch 方法来达到你想要的目的。同时， middleware 还拥有“可组合”这一关键特性。多个 middleware 可以被组合到一起使用，形成 middleware 链。其中，每个 middleware 都不需要关心链中它前后的 middleware 的任何信息。<br>源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (...args) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> store = createStore(...args)</div><div class="line">    <span class="keyword">let</span> dispatch = store.dispatch</div><div class="line">    <span class="keyword">let</span> chain = []</div><div class="line"></div><div class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</div><div class="line">      getState: store.getState,</div><div class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</div><div class="line">    &#125;</div><div class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</div><div class="line">    dispatch = compose(...chain)(store.dispatch)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...store,</div><div class="line">      dispatch</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;何为Redux&quot;&gt;&lt;a href=&quot;#何为Redux&quot; class=&quot;headerlink&quot; title=&quot;何为Redux&quot;&gt;&lt;/a&gt;何为Redux&lt;/h1&gt;&lt;p&gt;Redux是一个为JavaScript应用设计的可预测状态容器。GitHub官网是&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>套娃组件——记一次项目设计</title>
    <link href="http://yoursite.com/2017/12/13/%E5%A5%97%E5%A8%83%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/12/13/套娃组件——记一次项目设计/</id>
    <published>2017-12-13T09:56:56.000Z</published>
    <updated>2017-12-13T11:03:43.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近期，接到一个项目，商业产品引入新的券种————时长券。大致的交互和以往的现金券差不不多，仅仅是优惠券的数据结构不同，展示的弹框样式也有所不同。<br>下图是时长券弹框的样式：<br><img src="/img/时长券弹框样式.png" alt=""></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li>偷懒方案<br>大可将现金券的交互逻辑拷贝一份，装饰一个新的模板，留意券的数据结构，调整个别个性化交互即可。<br>预估两三天即可，很轻松。</li></ul><p>缺点：代码通过剪刀胶水一番操作后，重复大片，如果下次需要调整优惠券的一些逻辑时，相当于我要改两次。另外，弹框的交互和优惠券的业务掺杂在一起了。耦合度较高。</p><ul><li>自找麻烦方案<br>静下心，认真分析现金券和时长券之间共同点，思考是否可以将它们共同部分单独抽离出来。<br>比如弹框的左右翻页，就可以抽离出来作为弹框本身的事件处理，与何种券没有关系。</li></ul><h1 id="套娃组件"><a href="#套娃组件" class="headerlink" title="套娃组件"></a>套娃组件</h1><p>本着不给自己挖坑的原则，有必要好好设计一下。想到俄罗斯的玩具————套娃，既然两种券弹框样式和交互大多一致，就可以将共同部分抽离出为一个弹框组件。弹框组件维护自己的样式和交互，它并不关心优惠券的类别。<br>现金券弹框和时长券弹框都可继承自这个基础弹框，它们仅负责自己业务行为，将需要展示的优惠券列表通过参数形式传入到基础弹框组件中。<br>这就像一个套娃套住了另一个套娃。<br>在实际开发中，也尽量将基础弹框组件做成热拔插的组件，这样也可以应对以后业务扩展的需要，比如以后再引入其他券种，就可以继承自基础组件，而仅关心业务需求即可。</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>依据上面的思路，画出以下设计框架，以继承封装的形式层层套组件<br><img src="/img/优惠券套娃组件设计.png" alt=""></p><p>由于基础弹框组件已经封装了弹框的交互行为，当弹框点击行为触发时，比如翻页，它需要读取到下一页的数据并展示，那么通知券组件获取展示数据。此时需要为组件之间的通信架起桥梁。<br>我的解决方案是观察者模式，又称订阅发布模式。当基础弹框组件触发相关事件时，可以立即抛出消息，券组件就可以监听到这个消息，从而准备好相关数据，再次调用基础弹框组件暴露的方法更新视图。大致流程图如下：<br><img src="/img/时长券组件消息通知.png" alt=""></p><p>1.基础弹框组件继承观察者类(Observer)，在基础弹框组件的关键行为中，如翻页事件，会触发消息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.trigger(<span class="string">'go_page'</span>, [page])</div></pre></td></tr></table></figure></p><p>2.券组件初始化时，会监听来自基础弹框组件的消息，并依据消息完成业务逻辑，如翻页消息:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line">self.on(<span class="string">'go_page'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    <span class="comment">// get coupon list according to page paramater</span></div><div class="line">    self._common.goPage(page)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>3.券组件在实例化基础弹框组件时，可以传入一些钩子函数，这些钩子函数的作用是在弹框组件一些事件中执行券组件个性化需求。<br>比如基础弹框组件不关心券列表，其中显示的表格样式也可以由券组件配置，那么基础弹框组件在渲染券列表时，并不知道它的数据结构，因此可以调起传入的优惠券渲染钩子函数，这样渲染个性化的模板任务交给了券组件。<br>如果钩子函数参数是空的，那么基础弹框组件就会执行默认行为。<br>以下代码片段是计算使用优惠券后计算优惠信息，其中<code>calDiscountHook</code>就是一个钩子。当计算完毕后，还会抛出<code>calculate</code>消息告知券组件已计算完毕，可以执行一些额外的工作。（添加<code>eventPrefix</code>为的防止消息重名）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * [calculate 计算优惠信息]</span></div><div class="line"><span class="comment"> * @return &#123;number&#125;    [折后价]</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Common.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>,</div><div class="line">        discount = <span class="number">0</span></div><div class="line">    _.each(self._choosen, <span class="function"><span class="keyword">function</span> (<span class="params">coupon</span>) </span>&#123;</div><div class="line">        <span class="comment">// 可以指定计算优惠信息的钩子函数，方便自定义。默认读取discountValue字段</span></div><div class="line">        discount += ( self._op.calDiscountHook ? +self._op.calDiscountHook(coupon) : (+coupon.discountValue || <span class="number">0</span>) )</div><div class="line">    &#125;)</div><div class="line">    discount = toFixed(discount, <span class="number">2</span>)</div><div class="line">    self._updateDiscount(discount)</div><div class="line">    <span class="comment">// 如果你需要自定义更新显示优惠信息，你可以去监听这个事件</span></div><div class="line">    self.trigger(self._op.eventPrefix + <span class="string">'calculate'</span>, [self._choosen, discount])</div><div class="line">    <span class="keyword">return</span> discount</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;近期，接到一个项目，商业产品引入新的券种————时长券。大致的交互和以往的现金券差不不多，仅仅是优惠券的数据结构不同，展示的弹框样式也有所不
      
    
    </summary>
    
    
      <category term="项目设计" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>读懂package.json</title>
    <link href="http://yoursite.com/2017/12/12/%E8%AF%BB%E6%87%82package-json/"/>
    <id>http://yoursite.com/2017/12/12/读懂package-json/</id>
    <published>2017-12-12T01:57:34.000Z</published>
    <updated>2017-12-12T13:38:18.668Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端工程师，不断地去学习前端新技术是必须的。在这过程中，不断接触开源项目是必不可少的。github上的开源项目，我们发现大多数项目下都有一个package.json文件，package.json存储的是一个严格的json对象。那么今天分析一下package.json中的字段意义。</p><blockquote><p>本文主要是对<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="external">npm document</a>中<code>package.json</code>的简单翻译</p></blockquote><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>在package.json中最重要的两个字段是name和version，如果没有这两个字段，npm无法安装你的包。name和version就像是你的项目身份证，且必须是唯一的。如果你的包做了改动，那么version也应该改动。<br>一些规则：</p><ul><li>name少于214字符</li><li>name不可以以<code>.</code>和<code>_</code>开头</li><li>name应是URL安全的字符，因为name会出现在URL中（<code>git clone XXX</code>）</li></ul><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>version应满足<code>[major, minor, patch]</code>的格式，version必须能够被<code>node-semver</code>解析的. <a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="external">semver</a>给出了version的规则限定。</p><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>项目的描述信息</p><h3 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h3><p>项目的一些关键字。有助于用户通过关键字搜索到你的项目</p><h3 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h3><p>一个指向你项目主页的url</p><h3 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h3><p>当用户发现了你的bugs时，可以在这里找到你并反馈给你：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"url"</span> : <span class="string">"https://github.com/owner/project/issues"</span>,</div><div class="line">   <span class="string">"email"</span> : <span class="string">"project@hostname.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="license"><a href="#license" class="headerlink" title="license"></a>license</h3><p>指明你的项目许可证，让用户知道以何种权限使用你的项目</p><h3 id="people-fields-author-contributors"><a href="#people-fields-author-contributors" class="headerlink" title="people fields: author, contributors"></a>people fields: author, contributors</h3><p>宣誓你主权的地方啦<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"author"</span>:&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"xinhong"</span>,</div><div class="line">    <span class="string">"email"</span>: <span class="string">"xinhong@anjuke.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>表明项目下的哪些文件是重要的。效果类似于<code>.gitignore</code>文件，区别是前者包含性，后者排除性。</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>指向你项目入口文件。比如项目名为foo，那么用户需要使用你的项目时，需要书写代码<code>require(&#39;foo&#39;)</code>,并且你的入口文件需要抛出这个对象</p><h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><p>指明你的项目仓库地点。这有助于其他人能够帮助你一起维护项目，最常见的就是GitHub仓库啦：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"repository"</span> :</div><div class="line"> &#123;</div><div class="line">    <span class="string">"type"</span> : <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span> : <span class="string">"https://github.com/npm/npm.git"</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>scripts包含了在项目开发过程会使用的脚本命令，我们可以运行<code>npm run command-name</code>来执行它们：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>:&#123;</div><div class="line">   <span class="string">"start"</span>: <span class="string">"node server.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p><strong>For production</strong>: 指明你项目生产环境时的依赖，即别人使用你的项目代码时必须依赖某些插件方可使用。在这里需要特别说明一下关于依赖项目version的范围规则：</p><blockquote><p>版本号满足范式： major.minor.patch 即 主版本.次版本.补丁</p></blockquote><ul><li>version :必须满足规定的版本</li><li>>version  :大于某个版本</li><li>>=version :大于等于某个版本</li><li>&lt;version  :小于某个版本</li><li>&lt;=version  :小于等于某个版本</li><li>~version :大约等于某个版本。若指明minor，不允许超越minor;若未指明minor，则minor可变</li><li>^version  :兼容性版本。从左非零版本数值限定，之后版本数值可变</li><li>1.2.x  :指定某个版本数值可变</li><li>http://…  :指定链接</li><li>*  :任意版本</li><li>…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ~</span></div><div class="line">~<span class="number">1.2</span><span class="number">.3</span> := &gt;=<span class="number">1.2</span><span class="number">.3</span> &lt;<span class="number">1.</span>(<span class="number">2</span>+<span class="number">1</span>)<span class="number">.0</span> := &gt;=<span class="number">1.2</span><span class="number">.3</span> &lt;<span class="number">1.3</span><span class="number">.0</span></div><div class="line">~<span class="number">1.2</span> := &gt;=<span class="number">1.2</span><span class="number">.0</span> &lt;<span class="number">1.</span>(<span class="number">2</span>+<span class="number">1</span>)<span class="number">.0</span> := &gt;=<span class="number">1.2</span><span class="number">.0</span> &lt;<span class="number">1.3</span><span class="number">.0</span> (Same <span class="keyword">as</span> <span class="number">1.2</span>.x)</div><div class="line">~<span class="number">1</span> := &gt;=<span class="number">1.0</span><span class="number">.0</span> &lt;(<span class="number">1</span>+<span class="number">1</span>)<span class="number">.0</span><span class="number">.0</span> := &gt;=<span class="number">1.0</span><span class="number">.0</span> &lt;<span class="number">2.0</span><span class="number">.0</span> (Same <span class="keyword">as</span> <span class="number">1.</span>x)</div><div class="line">~<span class="number">0.2</span><span class="number">.3</span> := &gt;=<span class="number">0.2</span><span class="number">.3</span> &lt;<span class="number">0.</span>(<span class="number">2</span>+<span class="number">1</span>)<span class="number">.0</span> := &gt;=<span class="number">0.2</span><span class="number">.3</span> &lt;<span class="number">0.3</span><span class="number">.0</span></div><div class="line">~<span class="number">0.2</span> := &gt;=<span class="number">0.2</span><span class="number">.0</span> &lt;<span class="number">0.</span>(<span class="number">2</span>+<span class="number">1</span>)<span class="number">.0</span> := &gt;=<span class="number">0.2</span><span class="number">.0</span> &lt;<span class="number">0.3</span><span class="number">.0</span> (Same <span class="keyword">as</span> <span class="number">0.2</span>.x)</div><div class="line">~<span class="number">0</span> := &gt;=<span class="number">0.0</span><span class="number">.0</span> &lt;(<span class="number">0</span>+<span class="number">1</span>)<span class="number">.0</span><span class="number">.0</span> := &gt;=<span class="number">0.0</span><span class="number">.0</span> &lt;<span class="number">1.0</span><span class="number">.0</span> (Same <span class="keyword">as</span> <span class="number">0.</span>x)</div><div class="line"></div><div class="line"><span class="comment">// ^</span></div><div class="line">^<span class="number">1.2</span><span class="number">.3</span> := &gt;=<span class="number">1.2</span><span class="number">.3</span> &lt;<span class="number">2.0</span><span class="number">.0</span></div><div class="line">^<span class="number">0.2</span><span class="number">.3</span> := &gt;=<span class="number">0.2</span><span class="number">.3</span> &lt;<span class="number">0.3</span><span class="number">.0</span></div><div class="line">^<span class="number">0.0</span><span class="number">.3</span> := &gt;=<span class="number">0.0</span><span class="number">.3</span> &lt;<span class="number">0.0</span><span class="number">.4</span></div></pre></td></tr></table></figure><h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p><strong>For development</strong>: 当其他开发者需要继续开发你的项目时，需要安装的依赖。</p><h3 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h3><p>用于指明你的项目运行依赖的node版本或npm版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"engines"</span>:&#123;</div><div class="line">       <span class="string">"node"</span>: <span class="string">"&gt;=0.10.3"</span>,</div><div class="line">       <span class="string">"npm"</span>: <span class="string">"~1.0.20"</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>更多的参数可以查看<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="external">这个文档</a></p><p>@update<br>今天在看<a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="external">Yarn</a>文档的时候，发现有一篇文章对package.json的解析夜挺到位的，<a href="https://yarnpkg.com/zh-Hans/docs/package-json" target="_blank" rel="external">贴出来</a>供大家参考</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个前端工程师，不断地去学习前端新技术是必须的。在这过程中，不断接触开源项目是必不可少的。github上的开源项目，我们发现大多数项目下都有一个package.json文件，package.json存储的是一个严格的json对象。那么今天分析一下package.json
      
    
    </summary>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>target与currentTarget，傻傻分不清</title>
    <link href="http://yoursite.com/2017/12/06/target%E4%B8%8EcurrentTarget%EF%BC%8C%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85/"/>
    <id>http://yoursite.com/2017/12/06/target与currentTarget，傻傻分不清/</id>
    <published>2017-12-06T02:13:42.000Z</published>
    <updated>2017-12-12T02:29:38.798Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery中的focus与focusin</title>
    <link href="http://yoursite.com/2017/12/04/jQuery%E4%B8%AD%E7%9A%84focus%E4%B8%8Efocusin/"/>
    <id>http://yoursite.com/2017/12/04/jQuery中的focus与focusin/</id>
    <published>2017-12-04T07:36:02.000Z</published>
    <updated>2017-12-12T02:29:01.939Z</updated>
    
    <content type="html"><![CDATA[<p>关于focus与focusin的区别<br>敬请期待</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于focus与focusin的区别&lt;br&gt;敬请期待&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>工作过程中相关问题的总结</title>
    <link href="http://yoursite.com/2017/11/30/%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/30/工作过程中相关问题的总结/</id>
    <published>2017-11-30T08:51:57.000Z</published>
    <updated>2017-12-23T11:21:47.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20171130"><a href="#20171130" class="headerlink" title="20171130"></a>20171130</h1><h2 id="百度地图key校验未通过"><a href="#百度地图key校验未通过" class="headerlink" title="百度地图key校验未通过"></a>百度地图key校验未通过</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>今天中午，产品报出一个问题，部分经纪人用户在加载页面时，有如下的弹框报错：</p><p><img src="/img/百度地图key校验报错.jpeg" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>项目在前几天针对百度地图key进行了调整，将分散在不同页面的百度key统一通过PHP的配置完成输出，方便管理。同时key也使用了新的key，扩大流量。</p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><ol><li>首先确定百度地图的key是否正确输出，访问线上地址，打开终端查看dom后发现，百度key已经正确输出了。并且key也是正确的新key；</li><li>既然key是正确的，会不会是缓存的问题，导致用户访问的是老的key，而老key被停止了，导致用户端出现百度key不可用提示。于是让用户清空了浏览器端缓存，但仍然有这个问题；</li><li>会不会是新key的配置出问题了呢？询问用户的访问地址是什么，确认用户访问的地址是<code>vip.abc.com</code>,而我们网站的访问的地址是<code>vip.xyz.com</code>.询问后端后得知，网站可以通过两个域名访问，即<code>vip.abc.com</code>和<code>vip.xyz.com</code>。但我们之前配置百度地图key的白名单，仅配置了<code>*.xyz.com</code>，从而导致域名<code>vip.abc.com</code>未通过白名单校验。Bingo，找到了原因，随后在百度地图新key的白名单中将域名<code>*.xyz.com</code>加入后，用户端访问就正常了</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>遇到问题要冷静分析</p><h1 id="20171223"><a href="#20171223" class="headerlink" title="20171223"></a>20171223</h1><h2 id="集客家Webpack打包在Uglify中停滞"><a href="#集客家Webpack打包在Uglify中停滞" class="headerlink" title="集客家Webpack打包在Uglify中停滞"></a>集客家Webpack打包在Uglify中停滞</h2><p>在未优化之前，webpack对打包后的文件压缩混淆操作，使用到了UglifyJsPlugin插件。<br>但是在打包过程中，由于集客家中每个页面都是单独的，需要打包很多的文件，会导致阻塞</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>集客家使用的webpack版本是<code>1.15.x</code>,在这个版本中，内置了<code>webpack.optimize.UglifyJsPlugin</code>,它的版本是<a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/version-0.4" target="_blank" rel="external">0.4</a>。在这个版本中，UglifyJsPlugin还没有<code>parallel</code>和<code>cache</code>的特性。</li><li>因此Webpack提供的 UglifyJS 插件由于采用单线程压缩, 速度比较慢，甚至卡顿</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>升级UglifyJsPlugin插件，使其具有多线程和缓存的特性</li><li>升级webpack，因为在webpack2.x或3.x中内置的UglifyJsPlugin是具备以上特性的</li></ol><p>为了不影响项目的打包机制，我们采取了第一种方案去解决这个问题。我们查找到一个轮子插件去替代webpack内置的UglifyJsPlugin。 —— <a href="https://github.com/youzan/fast-uglifyjs-plugin" target="_blank" rel="external">FastUglifyJsPlugin</a>,它是对UglifyJsPlugin的改写，配合node的多线程支持来完成以上特性支持。</p><h2 id="分析FastUglifyJsPlugin原理"><a href="#分析FastUglifyJsPlugin原理" class="headerlink" title="分析FastUglifyJsPlugin原理"></a>分析FastUglifyJsPlugin原理</h2><p>首先Fast建立了cache机制，它默认指定了cache文件夹<code>.uglify</code>，存储所有打包后的js文件（为什么只存js？因为其他文件压缩仅仅是去除空格而已）。有意思的是，它以源文件js的文件哈希值（sha-1）为文件名的。<br>开始压缩时，插件运用node的<code>child_process</code>模块去fork子进程合作去压缩文件，执行单个文件压缩任务时，首先会从<code>.uglify</code>文件夹中获取已压缩文件名，用源文件js的hash值去和这些文件名比对，如果未发现，则执行这个压缩task，否则不再执行而直接读取这个文件内容作为压缩的内容（因为这个文件没有改变过）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;20171130&quot;&gt;&lt;a href=&quot;#20171130&quot; class=&quot;headerlink&quot; title=&quot;20171130&quot;&gt;&lt;/a&gt;20171130&lt;/h1&gt;&lt;h2 id=&quot;百度地图key校验未通过&quot;&gt;&lt;a href=&quot;#百度地图key校验未通过&quot; cla
      
    
    </summary>
    
    
      <category term="工作" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>结合百度地图的业务场景</title>
    <link href="http://yoursite.com/2017/11/22/%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2017/11/22/结合百度地图的业务场景/</id>
    <published>2017-11-22T10:51:58.000Z</published>
    <updated>2017-11-27T10:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这两天在做一个运用百度地图标记商铺地址的项目，现做一下总结</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>用户在一个输入框中输入地址的关键字，调用百度的<code>Autocomplete</code>接口获取联想地址列表，并展示在前端，供用户选择。<br>当用户选择一个地址后，再调用<code>LocalSearch</code>反编译地址，获得地址标点，然后在地图上标记；<br>用户也可以在地图上点击或拖拽锚点，并将结果反向至输入框中，达到联动的效果<br><img src="/img/地图联动效果.png" alt="地图联动效果"></p><h2 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h2><p>封装百度地图接口，形成组件，暴露必要的api，供业务调用</p><p>为了做到js部分代码的可移植性，尽量减少依赖。目前js部分仅依赖于jQuery。<br>页面展示和样式目前无法通用，需要依据业务自定义。可以做成模板。</p><p>组件设计：<br>内部维护地图实例对象，锚点以及自定义覆盖物。抽离业务方法完成地图交互。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.由于Autocomplete内部业务已经封装了一个，而不直接使用百度地图的Autocomplete，我们只关心其返回的结果，这里模拟了一个假的input<br>callback(cb)回调函数通过闭包形式由search完成后的onSearchComplete钩子函数调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!-- hack: 用于伪造百度Autocomplete --&gt;</div><div class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"faded_auto"</span> id=<span class="string">"faded_auto_input"</span>&gt;</div><div class="line"></div><div class="line">Flame.prototype.searchAutocomplete = <span class="function"><span class="keyword">function</span>(<span class="params">kw, cb</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>( !self._auto )&#123;</div><div class="line">            <span class="keyword">var</span> options = &#123;</div><div class="line">                input: <span class="string">'faded_auto_input'</span>,   <span class="comment">// PS: 如果不指定input, search后不会有结果返回</span></div><div class="line">                location: self.op.cityName,</div><div class="line">                onSearchComplete: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> s = [], rLen = result.getNumPois(), r</div><div class="line"></div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;rLen; i++)&#123;</div><div class="line">                        r = result.getPoi(i)</div><div class="line">                        s.push(&#123;</div><div class="line">                            business: r.business,</div><div class="line">                            address: r.city + r.district,</div><div class="line">                            province: r.province,</div><div class="line">                            city: r.city,</div><div class="line">                            district: r.district,</div><div class="line">                            street: r.street</div><div class="line">                        &#125;)</div><div class="line">                    &#125;</div><div class="line">                    cb(s)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            self._auto = <span class="keyword">new</span> BMap.Autocomplete(options)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        self._auto.search(kw)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>模拟input的原因是，项目中的Autocomplete已经个性化设置了，暂不能使用百度地图提供的Autocomplete</p><p>2.自定义覆盖物时，地图缩放会丢失覆盖物的宽高<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 缓存w,h的作用是什么？</span></div><div class="line"><span class="comment"> * 地图在缩放时，会丢失div的宽高（可能是百度地图在重绘marker时异步导致的）</span></div><div class="line"><span class="comment"> * 这里缓存一下宽高，用于正确更改样式</span></div><div class="line"><span class="comment"> */</span></div><div class="line">CustomOverlay.prototype._setOverlayPos = <span class="function"><span class="keyword">function</span>(<span class="params">p, w, h</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(w || h)&#123;</div><div class="line">        self._w = w</div><div class="line">        self._h = h</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    self._arrow.style.left = (self._w) / <span class="number">2</span> - <span class="number">8</span> + <span class="string">'px'</span></div><div class="line">    self._div.style.left = p.x - (self._w/<span class="number">2</span>) - <span class="number">2</span> + <span class="string">"px"</span></div><div class="line">    self._div.style.top  = p.y - self._h - <span class="number">25</span> + <span class="string">"px"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>丢失的主要原因在于地图在缩放的时候，地图中锚点需要重新绘制，异步的过程导致获取元素的宽高出错。<br>由于地图中锚点的文本信息不会发生变化，因此可以将上一次的宽高保存下来，然后直接使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;这两天在做一个运用百度地图标记商铺地址的项目，现做一下总结&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Karma单元测试</title>
    <link href="http://yoursite.com/2017/11/16/Karma%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/11/16/Karma单元测试/</id>
    <published>2017-11-16T06:22:56.000Z</published>
    <updated>2017-11-19T14:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Karma"><a href="#Karma" class="headerlink" title="Karma?"></a>Karma?</h1><p>Javascript 单元测试工具</p><h1 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h1><p>公司内部维护使用了一套前端底层的JS框架（简称UI），需要有完整的测试。<br>UI是运行在浏览器环境中，内部提供了一些常用的函数库，以及根据义务需要封装的UI皮肤。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.全局安装<code>karma-cli</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g karma-cli</div></pre></td></tr></table></figure></p><p>2.项目安装相关依赖<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D karma jasmine-core karma-jasmine</div></pre></td></tr></table></figure></p><h1 id="自动化单元测试"><a href="#自动化单元测试" class="headerlink" title="自动化单元测试"></a>自动化单元测试</h1><p>Karma最常用的功能就是它的自动化单元测试<br>首先在终端运行：<code>karma init</code><br>依据提示，输入一些配置参数，之后我们可以得到以下的配置文件（根目录下的<code>karma.conf.js</code>）:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Karma configuration</span></div><div class="line"><span class="comment">// Generated on Thu Nov 16 2017 11:53:28 GMT+0800 (CST)</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">  config.set(&#123;</div><div class="line"></div><div class="line">    <span class="comment">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class="line">    basePath: <span class="string">''</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// frameworks to use</span></div><div class="line">    <span class="comment">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class="line">    frameworks: [<span class="string">'jasmine'</span>],</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// list of files / patterns to load in the browser</span></div><div class="line">    files: [</div><div class="line">        <span class="string">'dist/*.min.css'</span>,</div><div class="line">        <span class="string">'dist/*.min.js'</span>,</div><div class="line">        <span class="string">'test/*.spec.js'</span></div><div class="line">    ],</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// list of files to exclude</span></div><div class="line">    exclude: [</div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">// test results reporter to use</span></div><div class="line">    <span class="comment">// possible values: 'dots', 'progress'</span></div><div class="line">    <span class="comment">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class="line">    reporters: [<span class="string">'progress'</span>],</div><div class="line"></div><div class="line">    <span class="comment">// web server port</span></div><div class="line">    port: <span class="number">9876</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// enable / disable colors in the output (reporters and logs)</span></div><div class="line">    colors: <span class="literal">true</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// level of logging</span></div><div class="line">    <span class="comment">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class="line">    logLevel: config.LOG_INFO,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// enable / disable watching file and executing tests whenever any file changes</span></div><div class="line">    autoWatch: <span class="literal">true</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// start these browsers</span></div><div class="line">    <span class="comment">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class="line">    browsers: [<span class="string">'Chrome'</span>],</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Continuous Integration mode</span></div><div class="line">    <span class="comment">// if true, Karma captures browsers, runs the tests and exits</span></div><div class="line">    singleRun: <span class="literal">false</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Concurrency level</span></div><div class="line">    <span class="comment">// how many browser should be started simultaneous</span></div><div class="line">    concurrency: <span class="literal">Infinity</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后再在根目录下运行<code>karma start</code>,karma会自动运行起Chrome浏览器，并在终端中输出测试结果。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>1.由于对mocha和chai比较熟，所以用了这两个测试框架。测试异步代码时，<code>done</code>和<code>promise</code>最好不要混用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Karma&quot;&gt;&lt;a href=&quot;#Karma&quot; class=&quot;headerlink&quot; title=&quot;Karma?&quot;&gt;&lt;/a&gt;Karma?&lt;/h1&gt;&lt;p&gt;Javascript 单元测试工具&lt;/p&gt;
&lt;h1 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; clas
      
    
    </summary>
    
    
      <category term="Karma" scheme="http://yoursite.com/tags/Karma/"/>
    
  </entry>
  
  <entry>
    <title>常用Webpack插件</title>
    <link href="http://yoursite.com/2017/11/10/%E5%B8%B8%E7%94%A8Webpack%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/11/10/常用Webpack插件/</id>
    <published>2017-11-10T07:30:21.000Z</published>
    <updated>2017-12-29T12:19:09.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-plugin"><a href="#webpack-plugin" class="headerlink" title="webpack plugin?"></a>webpack plugin?</h1><p>插件是 wepback 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！</p><p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p><p>由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...,</div><div class="line">    plugins:[</div><div class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h1><h2 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a><a href="https://doc.webpack-china.org/plugins/commons-chunk-plugin" target="_blank" rel="external">CommonsChunkPlugin</a></h2><p>将应用中引入的公共部分建立一个独立的文件，便于浏览器缓存公共代码。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存起来到缓存中供后续使用。</p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">    entry:&#123;</div><div class="line">        vendor: [<span class="string">'underscore'</span>, <span class="string">'jquery'</span>],</div><div class="line">        app: <span class="string">'./app'</span></div><div class="line">    &#125;,</div><div class="line">    ...,</div><div class="line">    plugins:[</div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">            name: <span class="string">'verdor'</span>,    <span class="comment">// common chunk的名称, 如上面entry中的vendor</span></div><div class="line">            filename: <span class="string">'commons.js'</span>  <span class="comment">// 为common chunk起一个新的文件名称</span></div><div class="line">            <span class="comment">// 其他options</span></div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/" target="_blank" rel="external">ExtractTextWebpackPlugin</a></h2><p>将bundle中的文本单独抽离为独立的文件.</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install extract-text-webpack-plugin --save-dev</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: <span class="string">"style-loader"</span>,</div><div class="line">          use: <span class="string">"css-loader"</span></div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="HotModuleReplacementPlugin"><a href="#HotModuleReplacementPlugin" class="headerlink" title="HotModuleReplacementPlugin"></a><a href="https://doc.webpack-china.org/plugins/hot-module-replacement-plugin/" target="_blank" rel="external">HotModuleReplacementPlugin</a></h2><p>HMR,模块热替换插件<br><a href="https://doc.webpack-china.org/concepts/hot-module-replacement" target="_blank" rel="external">这篇教程</a>提到它的作用.</p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通常不需要设置任何属性</span></div><div class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure></p><h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/html-webpack-plugin/" target="_blank" rel="external">HtmlWebpackPlugin</a></h2><p>HtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev html-webpack-plugin</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = &#123;</div><div class="line">  entry: <span class="string">'index.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">    filename: <span class="string">'index_bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>它会在<code>/dist</code>下生成一个<code>index.html</code>文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index_bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果你配合<code>ExtractTextPlugin</code>使用，它也会将抽离的单独文件放入对应位置中</p><p>具体用法访问它的<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="external">Github主页</a></p><h2 id="UglifyjsWebpackPlugin"><a href="#UglifyjsWebpackPlugin" class="headerlink" title="UglifyjsWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="external">UglifyjsWebpackPlugin</a></h2><p>代码混淆插件</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev uglifyjs-webpack-plugin</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> UglifyJSPlugin()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack-plugin&quot;&gt;&lt;a href=&quot;#webpack-plugin&quot; class=&quot;headerlink&quot; title=&quot;webpack plugin?&quot;&gt;&lt;/a&gt;webpack plugin?&lt;/h1&gt;&lt;p&gt;插件是 wepback 的支柱功能。we
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack原理剖析</title>
    <link href="http://yoursite.com/2017/11/10/webpack%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2017/11/10/webpack原理剖析/</id>
    <published>2017-11-10T03:00:06.000Z</published>
    <updated>2017-12-12T02:29:01.923Z</updated>
    
    <content type="html"><![CDATA[<p>webpack工作流程图，待完善<br><img src="/img/webpack工作流程图.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack工作流程图，待完善&lt;br&gt;&lt;img src=&quot;/img/webpack工作流程图.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>使用Babel</title>
    <link href="http://yoursite.com/2017/11/09/%E4%BD%BF%E7%94%A8Babel/"/>
    <id>http://yoursite.com/2017/11/09/使用Babel/</id>
    <published>2017-11-09T02:31:15.000Z</published>
    <updated>2017-11-09T03:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel?"></a>Babel?</h1><blockquote><p>Babel is a JavaScript compiler.</p></blockquote><p>使用Babel可以让你用下一代的语法特性写今天的代码。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="Babel-CLI"><a href="#Babel-CLI" class="headerlink" title="Babel-CLI"></a>Babel-CLI</h2><p>1.安装babel以及preset<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-cli babel-preset-env</div></pre></td></tr></table></figure></p><p>2.新建<code>.babelrc</code>文件或者在<code>package.json</code>中配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo <span class="string">'&#123;presets:["env"]&#125;'</span> &gt; .babelrc</div><div class="line"><span class="comment">// or option in package.json</span></div><div class="line">&#123;</div><div class="line">    ...,</div><div class="line">    <span class="string">"babel"</span>:&#123;</div><div class="line">        <span class="string">"presets"</span>: [<span class="string">"env"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>babel命令行提供了一些命令，可以敲击<code>babel --help</code>查看</p><h2 id="与项目配合使用"><a href="#与项目配合使用" class="headerlink" title="与项目配合使用"></a>与项目配合使用</h2><p>一般而言babel适合与其他构建工具一起使用，如<code>webpack</code>,<code>gulp</code>等。当然如果应用并不大，也可以单独使用，此时你需要去了解一下<a href="http://babeljs.io/docs/usage/api/" target="_blank" rel="external">babel API</a>了。<br>以下我们以和<code>webpack</code>使用为例，如果你需要和<code>gulp</code>使用，你可以参考<a href="https://www.npmjs.com/package/gulp-babel/" target="_blank" rel="external">gulp-babel</a></p><ul><li><p>安装插件<br>首先需要知道项目代码需要翻译到哪个目标代码，假设你的项目是用CoffeeScript书写的，需要将代码转换为ES5.你需要安装好以下插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015 coffee-loader coffeescript</div></pre></td></tr></table></figure></li><li><p>配置webpack<br>在<code>webpack.config.js</code>(webpack 3.X)中如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        rules: [</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.coffee$/</span>,</div><div class="line">                use: [&#123;</div><div class="line">                    loader: <span class="string">'coffee-loader'</span>,</div><div class="line">                    options: &#123;</div><div class="line">                        sourceMap: <span class="literal">true</span>    <span class="comment">// 开启sourceMap</span></div><div class="line">                    &#125;</div><div class="line">                &#125;]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>新建<code>.babelrc</code><br>在项目根目录下新建文件<code>.babelrc</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    presets:[</div><div class="line">        <span class="string">'es2015'</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="presets"><a href="#presets" class="headerlink" title="presets"></a>presets</h3><p>babel官方提供了几个常用的<a href="https://babeljs.io/docs/plugins/#presets" target="_blank" rel="external">presets</a>：</p><ul><li>env</li><li>es2015</li><li>es2016</li><li>es2017</li><li>latest</li><li>react</li><li>flow</li></ul><p>如果你要使用上面的任一preset，均要安装对应的插件<code>babel-preset-*</code></p><p>如果你使用了多个presets，则babel会逆序执行相应插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span>,</div><div class="line">    <span class="string">"react"</span>,</div><div class="line">    <span class="string">"stage-2"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>stage-2</code>-&gt;<code>react</code>-&gt;<code>es2015</code></p><p>更多关于babel的使用，你可以访问<a href="http://babeljs.io/" target="_blank" rel="external">官网</a>或者阅读这篇<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="external">babel用户手册</a></p><h1 id="Babel插件"><a href="#Babel插件" class="headerlink" title="Babel插件"></a>Babel插件</h1><p>如果你想写一个自己的babel插件，你可以阅读一下<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="external">这个文章</a>，对babel的编译原理做了介绍，还是中文的哦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Babel&quot;&gt;&lt;a href=&quot;#Babel&quot; class=&quot;headerlink&quot; title=&quot;Babel?&quot;&gt;&lt;/a&gt;Babel?&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Babel is a JavaScript compiler.&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="Babel" scheme="http://yoursite.com/tags/Babel/"/>
    
  </entry>
  
</feed>
