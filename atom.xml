<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying my idea</title>
  
  <subtitle>Welcome to my sweet home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-08T13:01:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xin Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习使用Webpack</title>
    <link href="http://yoursite.com/2017/11/08/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8Webpack/"/>
    <id>http://yoursite.com/2017/11/08/学习使用Webpack/</id>
    <published>2017-11-08T02:10:31.000Z</published>
    <updated>2017-11-08T13:01:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天抽了点时间详细去学习一下使用Webpack，以前仅仅是停留在使用层面上。</p><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack?"></a>Webpack?</h1><p>依据<a href="https://webpack.js.org/" target="_blank" rel="external">Webpack官网</a>上的介绍，Webpack是一个帮助你打包静态资源的打包软件，处理各种依赖关系等。</p><p>webpack之所以如此受欢迎，因为以下三个特点：<br>1.Spliting code<br>2.Loader<br>3.Plugins</p><p>webpack中主要有四个概念，只要掌握这四个概念，基本可以学会使用webpack</p><ul><li>Entry<br>Entry告知webpack应该从哪个脚本文件开始构建，进而构建依赖图</li><li>Output<br>Output会告知webpack应该将打包好的文件放到哪个文件夹中以及如何命名它们</li><li>Loader<br>webpack本身只会处理javascript文件，指定相关loader会帮助webpack去处理其他的资源，如图片、样式等<br>loader的工作像是预处理(pre-handle)，将源文件转换为js文件，或将图片转换base64编码格式等</li><li>Plugin<br>Plugin与Loader主要区别在于，loader仅用于如何处理资源，比如讲less编写的样式转换为css格式的样式。<br>plugin则帮助用户进一步处理资源，比如将经loader处理后的资源压缩处理或混淆处理等<br>plugin的工作像后处理(post-handle)，将js文件进一步处理（压缩等）</li></ul><p>我们来看看完整的webpack.config.js文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//installed via npm</span></div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//to access built-in plugins</span></div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure></p><p>可以看出，loader是不需要引进的，而plugin则需要通过require引入</p><h1 id="Webpack-Cli"><a href="#Webpack-Cli" class="headerlink" title="Webpack Cli"></a>Webpack Cli</h1><p>首先通过webpack命令行来看看它可以做什么。</p><p>如何安装？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir webpacktest &amp; cd webpacktest</div><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure></p><p>现在假设你在<code>webpacktest</code>文件夹有一个<code>hello.js</code>文件，你写了几行代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello world'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>让我们在终端运行一下webpack<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack hello.js hello.bundle.js</div></pre></td></tr></table></figure></p><p>可以在终端上看到如下提示：<br><img src="/img/WX20171108-150828@2x.png" alt=""><br>说明webpack已经打包成功，它会在当前目录下生成一个新的文件<code>hello.bundle.js</code>文件。</p><p>webpack命令内置了很多的选项，有兴趣可以敲击<code>webpack --help</code>查看。</p><h1 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h1><p>webpack当配合配置文件一起使用，才能真正发挥实力，因此我们重点学习一下config文件如何<a href="https://webpack.js.org/configuration/" target="_blank" rel="external">配置</a>。</p><h2 id="entry属性"><a href="#entry属性" class="headerlink" title="entry属性"></a>entry属性</h2><p>entry有两种方式指定</p><ol><li><code>entry: string|Array&lt;string&gt;</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure></li></ol><p>如果你的项目中需要的打包的资源并不复杂，仅有若干个资源，那么使用第一种可以快速构建应用。</p><ol><li><code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">    vendors: <span class="string">'./src/vendors.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ol><p>第二种是webpack最主要entry的配置方式，配合outpu属性可以自定义打包文件的名称</p><h2 id="output属性"><a href="#output属性" class="headerlink" title="output属性"></a>output属性</h2><p>output接受对象，分别制定打包文件的文件名和存放路径.<br>output与entry配合使用，如果entry使用的第一种方法，那么output则是这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,</div><div class="line">    path: <span class="string">'/home/proj/public/assets'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>第二种方法对应：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">    search: <span class="string">'./src/search.js'</span></div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'[name].js'</span>,</div><div class="line">    path: __dirname + <span class="string">'/dist'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="loader属性"><a href="#loader属性" class="headerlink" title="loader属性"></a>loader属性</h2><p>如上面所言，loader帮助我们进行一些预处理的工作</p><p>比如将TypeScript编写的代码翻译成js代码，预处理所有css文件<br>首先需要安装<code>ts-loader</code>，终端运行<code>npm install --save-dev ts-loader css-loader</code>，配置文件如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>观察上面module的数据结构，接受一个rules数组，告知webpack应该使用哪个loader。test是正则，当文件满足正则表达式时，调用相应loader预处理。<br>当我们需要为某个类型文件执行多个loaders时，可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        use: [</div><div class="line">          &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</div><div class="line">          &#123;</div><div class="line">            loader: <span class="string">'css-loader'</span>,</div><div class="line">            options: &#123;</div><div class="line">              modules: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>webpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这种情况下，以 .css 结尾的全部文件，都将被提供给 style-loader 和 css-loader。这使你可以在依赖于此样式的文件中 import ‘./style.css’。现在，当该模块运行时，含有 CSS 字符串的 <style> 标签，将被插入到 html 文件的 <head> 中。</p><p>更多loader的配置方式，可以查看<a href="https://webpack.js.org/concepts/loaders/#using-loaders">这里</a></p><p>看一个简单的例子<br>我们的代码是用ES6写的，但代码运行在ES5环境中，因此需要将ES6语法的代码翻译为ES5，我们需要<code>babel-loader</code>的帮助。<br>填写配置文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: <span class="string">'./src/js/main.js'</span>,</div><div class="line">    output:&#123;</div><div class="line">        filename: <span class="string">'bundle.js'</span>,</div><div class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        rules:[</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.js$/</span>,</div><div class="line">                use: &#123;</div><div class="line">                    loader: <span class="string">'babel-loader'</span>,</div><div class="line">                    options:&#123;</div><div class="line">                        presets: [<span class="string">'es2015'</span>]</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面代码中，我们配置了babel的presets为<code>es2015</code>，我们需要安装一些插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-core babel-loader babel-preset-es2015</div></pre></td></tr></table></figure></p><p>如果不希望在配置文件中填写options，也可以在根目录下新建一个<code>.babelrc</code>文件，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>更多关于babel的用法，可以访问它的<a href="https://babeljs.io/">官网</a></p><h2 id="plugin属性"><a href="#plugin属性" class="headerlink" title="plugin属性"></a>plugin属性</h2><p>plugin的角色更多是后处理，帮助用户进一步操作预处理后的文件。<br>plugin是构造函数，因此使用的时候需要我们去实例化它：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//installed via npm</span></div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//to access built-in plugins</span></div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span>,</div><div class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">        use: <span class="string">'babel-loader'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure></p><p>由于webpack.config.js本身是一个可引入的脚本，因此它本身用什么语言编写无关紧要，即可以用TypeScript或CoffeeScript编写，只要能正确被webpack识别即可。</p><h2 id="常用的Plugin"><a href="#常用的Plugin" class="headerlink" title="常用的Plugin"></a>常用的Plugin</h2><p>html-webpack-plugin<br>clean-webpack-plugin</p></style></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天抽了点时间详细去学习一下使用Webpack，以前仅仅是停留在使用层面上。&lt;/p&gt;
&lt;h1 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack?&quot;&gt;&lt;/a&gt;Webpack?&lt;/h1&gt;&lt;p&gt;依据
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>同构Javascript应用</title>
    <link href="http://yoursite.com/2017/11/01/%E5%90%8C%E6%9E%84Javascript%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/01/同构Javascript应用/</id>
    <published>2017-11-01T02:10:31.000Z</published>
    <updated>2017-11-01T13:23:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然机会在看Redux文档的时候，看到同构应用这个名词，有些概念模糊，因此去Google了一下。得到以下概念：</p><blockquote><p>能够在客户端和服务器端均可运行的应用——同构应用</p></blockquote><p>既然我是搞前端的，就有必要研究一下同构JavaScript应用。</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>前端的发展历史其实并不算太久，JS的发明一开始也只是给页面加上一点讨人欢喜的小交互。更别提实现同构应用了。</p><p>能够实现同构Javascript应用，首先得益于Node.js的发展。Node.js的发展使得JS能够在服务器端运行JS代码。从而解放了JS的天性——单线程、异步和函数式。</p><p>Web 世界有一个至理名言，就是 Java 提出的“Write once, run everywhere”。但这句话只适用于 Java 么？我们能否也用它来形容 JavaScript 呢？答案是 Yes。</p><h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><p>多年以前，web 只是一些由 HTML 和 CSS 搭建的静态页面，没有太多的交互。用户的每一个动作都需要服务器来创建并返回一个完整的页面。幸而有了 JavaScript，开发者开始创建很棒的效果，不过 Ajax 的到来才是这场革新的真正开始。Web 开发者开始编写能够与服务端进行交互，且在不重载页面的情况下向服务端发送并接受数据的页面。AJAX促使了前端发展的第二次革命。</p><p>随着时间的推移，客户端代码可以做的事情越来越多，催生了被称作单页面应用（SPA）的一类应用。SPA 在首次加载页面时就获取了所有必需的资源，或者再按需动态加载并且渲染到页面上。我以前做过一个云笔记的应用，使用的就是SPA的架构，客户端（浏览器）在第一次访问站点时，会一次请求到所有资源，因此在第一次访问时会延迟一会来请求加载静态资源。也因为如此，我实现了笔记的离线存储。</p><p>SPA 准许重度的交互设计，因为几乎所有的操作都在客户端执行，保持最低限度地与服务端进行交流。不幸的是，它们也存在一些严重的问题，我们选择几个进行讨论。</p><h3 id="1-性能"><a href="#1-性能" class="headerlink" title="1.性能"></a>1.性能</h3><p>因为相对于静态页面，SPA 需要更多的客户端代码，需要下载数据的体积也更大。这使得手机加载速度很慢，可能会导致一些极端的状况 —— 比如糟糕的用户体验以及收入上的损失等。依据 <a href="http://link.zhihu.com/?target=http%3A//blogs.msdn.com/b/ie/archive/2014/10/08/http-2-the-long-awaited-sequel.aspx" target="_blank" rel="external">Microsoft</a> 的一篇文章 ——</p><blockquote><p>Bing 的一项研究表明：页面的加载时间每增加 10ms，站点年度总收入就会减少 $250K。</p></blockquote><h3 id="2-SEO"><a href="#2-SEO" class="headerlink" title="2.SEO"></a>2.SEO</h3><p>SPA主要依赖于JS执行来实时获取页面信息，从而搜索引擎很难索引这些页面。爬虫请求服务器，结果只获得了原始文本，从而会放弃记录。这对于以信息类为主的网站或应用是很不合理的。直接影响了网站的访问量。如果网站是内部使用，则SEO无关紧要。如果面向大众服务的站点，SEO直接决定它在搜索引擎中的排名。一个好的索引对任何公司来说都至关重要，它通常会带来更多的流量以及更高的回报。</p><p>好在现在有很多服务器可以实现首屏后台渲染，将渲染好的页面传给前端。</p><p>或者服务器端定时生成页面的静态文件放入特定站点，当有爬虫访问时，返回生成的静态页面。如<a href="https://github.com/ariya/phantomjs" target="_blank" rel="external">PhantomJS</a>可自动生成页面。</p><h3 id="3-导航不可用"><a href="#3-导航不可用" class="headerlink" title="3.导航不可用"></a>3.导航不可用</h3><p>需要应用自行实现前进，后退</p><h2 id="同构-JavaScript-应用"><a href="#同构-JavaScript-应用" class="headerlink" title="同构 JavaScript 应用"></a>同构 JavaScript 应用</h2><p>同构 JavaScript 应用基于 JavaScript 编写，可以在客户端和服务端运行。正因为此，你只需要写一次代码，就可以在服务端渲染静态页面，还可以在客户端完成复杂的交互。所以，这种方式互通了两个世界，并且避免了前面提到了两个问题。</p><p>现在，有很多框架可以帮助你开发这类应用。其中最著名的一个可能是 <a href="http://link.zhihu.com/?target=https%3A//www.meteor.com/" target="_blank" rel="external">Meteor</a>。Meteor 是一个开源 JavaScript 框架，基于 Node.js 编写，专注于实时 web 应用。我想提到的另一个项目是 <a href="http://link.zhihu.com/?target=http%3A//rendrjs.github.io/rendr/" target="_blank" rel="external">Rendr</a>，它是 <a href="http://link.zhihu.com/?target=http%3A//nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product" target="_blank" rel="external">Airbnb 开发</a>的一款轻量级类库，准许同时在客户端和服务端运行 Backbone.js。</p><p>越来越多的公司将 Node.js 应用到他们的产品中。客户端和服务端的代码共享成为一个更加普通而自然的选择。在我看来，这种做法将是 web 开发的未来。有些类库通过共享模板又增强了这一趋势，比如 <a href="http://link.zhihu.com/?target=http%3A//facebook.github.io/react/" target="_blank" rel="external">React</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;偶然机会在看Redux文档的时候，看到同构应用这个名词，有些概念模糊，因此去Google了一下。得到以下概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能够在客户端和服务器端均可运行的应用——同构应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然我是搞前端的，就有必要研究
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript计算精度问题</title>
    <link href="http://yoursite.com/2017/10/29/Javascript%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/29/Javascript计算精度问题/</id>
    <published>2017-10-29T07:01:45.000Z</published>
    <updated>2017-11-01T02:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript是弱类型语言，在进行浮点数计算时会有误差出现（这在很多语言中都是存在的，只是其他语言内部会去规避误差风险）。如果系统中有较多的浮点数计算步骤且对计算结果有准确度要求，则需要手动书写代码去规避。如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/280956-0e24421bc8f4c197.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>解决的主要思路是将浮点数转换为整数进行计算，然后再转换为正确结果。</p><h2 id="双数四则运算"><a href="#双数四则运算" class="headerlink" title="双数四则运算"></a>双数四则运算</h2><p>以下代码可以参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加法函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">accAdd</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> r1,r2,m;</div><div class="line">    <span class="keyword">try</span>&#123;r1=arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;r1=<span class="number">0</span>&#125;</div><div class="line">    <span class="keyword">try</span>&#123;r2=arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;r2=<span class="number">0</span>&#125;</div><div class="line">    m=<span class="built_in">Math</span>.pow(<span class="number">10</span>,<span class="built_in">Math</span>.max(r1,r2));</div><div class="line">    <span class="keyword">return</span> (arg1*m+arg2*m)/m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//减法函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">accSub</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> r1,r2,m,n;</div><div class="line">     <span class="keyword">try</span>&#123;r1=arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;r1=<span class="number">0</span>&#125;</div><div class="line">     <span class="keyword">try</span>&#123;r2=arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;r2=<span class="number">0</span>&#125;</div><div class="line">     m=<span class="built_in">Math</span>.pow(<span class="number">10</span>,<span class="built_in">Math</span>.max(r1,r2));</div><div class="line">     <span class="comment">//last modify by deeka</span></div><div class="line">     <span class="comment">//动态控制精度长度</span></div><div class="line">     n=(r1&gt;=r2)?r1:r2;</div><div class="line">     <span class="keyword">return</span> ((arg1*m-arg2*m)/m).toFixed(n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//乘法函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">accMul</span>(<span class="params">arg1,arg2</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> m=<span class="number">0</span>,s1=arg1.toString(),s2=arg2.toString();</div><div class="line">    <span class="keyword">try</span>&#123;m+=s1.split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;&#125;</div><div class="line">    <span class="keyword">try</span>&#123;m+=s2.split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;&#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>(s1.replace(<span class="string">"."</span>,<span class="string">""</span>))*<span class="built_in">Number</span>(s2.replace(<span class="string">"."</span>,<span class="string">""</span>))/<span class="built_in">Math</span>.pow(<span class="number">10</span>,m);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//除法函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">accDiv</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>,r1,r2;</div><div class="line">    <span class="keyword">try</span>&#123;t1=arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;&#125;</div><div class="line">    <span class="keyword">try</span>&#123;t2=arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;&#125;</div><div class="line">    <span class="keyword">with</span>(<span class="built_in">Math</span>)&#123;</div><div class="line">r1=<span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>,<span class="string">""</span>));</div><div class="line">r2=<span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>,<span class="string">""</span>));</div><div class="line"><span class="keyword">return</span> accMul((r1/r2),pow(<span class="number">10</span>,t2-t1));</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 可以绑定至Number原型链上方便调用</span></div><div class="line"><span class="built_in">Number</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> accAdd(<span class="keyword">this</span>,arg)</div><div class="line">&#125;</div><div class="line"><span class="built_in">Number</span>.prototype.sub = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> accSub(<span class="keyword">this</span>,arg)</div><div class="line">&#125;</div><div class="line"><span class="built_in">Number</span>.prototype.mul = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> accMul(<span class="keyword">this</span>,arg)</div><div class="line">&#125;</div><div class="line"><span class="built_in">Number</span>.prototype.div = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> accDiv(<span class="keyword">this</span>,arg)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'0.1+0.2='</span>,(<span class="number">0.1</span>).add(<span class="number">0.2</span>))</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'10.3-9.2='</span>,(<span class="number">10.3</span>).sub(<span class="number">9.2</span>))</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'8.1*0.7='</span>,(<span class="number">8.1</span>).mul(<span class="number">0.7</span>))</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'0.21/0.7='</span>,(<span class="number">0.21</span>).div(<span class="number">0.7</span>))</div></pre></td></tr></table></figure><h2 id="多数据三则运算"><a href="#多数据三则运算" class="headerlink" title="多数据三则运算"></a>多数据三则运算</h2><p>以下代码仅列出了三则运算：加减乘。并未列出除法运算，因为除法本身具有特殊性，无法保证所得结果一定是除的尽的。 </p><p>会用到的工具函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获得数据的小数部分 2.25 -&gt; 25</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDecimals</span>(<span class="params">num</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span>(num == <span class="keyword">void</span> <span class="number">0</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">''</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = (<span class="string">''</span>+num).split(<span class="string">'.'</span>)</div><div class="line"><span class="keyword">return</span> (arr.length &gt; <span class="number">1</span> ? arr[<span class="number">1</span>] : <span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获得一列数中小数点后位数的最大值  [0.25, 6.2598] -&gt; 4  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxDecimalBits</span>(<span class="params">args</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> i, m = <span class="number">0</span>, len, t</div><div class="line"></div><div class="line"><span class="keyword">if</span>( !args || !args.length) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">len = args.length</div><div class="line"></div><div class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">t = getDecimals(args[i]).length</div><div class="line">m = t &gt; m ? t : m</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> m</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>算法思想都是一致的，取得一列数中小数点位数最大数，各乘以最大公因子。再对最后的结果进行处理。</p><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNum</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>),</div><div class="line">len = args.length,</div><div class="line">result = <span class="number">0</span>,</div><div class="line">m = <span class="number">0</span>, i, factor</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!len) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">m = getMaxDecimalBits(args)</div><div class="line">factor = <span class="built_in">Math</span>.pow(<span class="number">10</span>, m)</div><div class="line"></div><div class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">result+=(args[i] * factor)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> result / factor</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">subNum</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>),</div><div class="line">len = args.length,</div><div class="line">result, m, i, factor</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!len) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">m = getMaxDecimalBits(args)</div><div class="line">factor = <span class="built_in">Math</span>.pow(<span class="number">10</span>, m)</div><div class="line"></div><div class="line">result = args[<span class="number">0</span>] * factor</div><div class="line"><span class="keyword">for</span>( i=<span class="number">1</span>; i&lt;len; i++)&#123;</div><div class="line">result -= (args[i] * factor)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> result / factor</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiNum</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>),</div><div class="line">len = args.length,</div><div class="line">m, factor, i, result = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(!len) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">m = getMaxDecimalBits(args)</div><div class="line">factor = <span class="built_in">Math</span>.pow(<span class="number">10</span>, m)</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">result *= (args[i] * factor)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> result / <span class="built_in">Math</span>.pow(factor, len)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Javascript是弱类型语言，在进行浮点数计算时会有误差出现（这在很多语言中都是存在的，只是其他语言内部会去规避误差风险）。如果系统中有较多的浮点数计算步骤且对计算结果有准确度要求，则需要手动书写代码去规避。如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upl
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Cookie,localStorage,sessionStorage简单分析</title>
    <link href="http://yoursite.com/2017/04/10/Cookie-localStorage-sessionStorage/"/>
    <id>http://yoursite.com/2017/04/10/Cookie-localStorage-sessionStorage/</id>
    <published>2017-04-10T14:58:42.000Z</published>
    <updated>2017-11-01T02:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>1.<strong>Cookie</strong><br>网站为了辨别用户身份而储存在用户本地终端上的数据（通常经过加密）</p><p>2.<strong>web storage</strong><br>包括localStorage和sessionStorage。HTML5的产物，两者均用于本地储存数据。前者永久保存（除非手动删除），后者用于会话内（窗口存活期内）保存。</p><p>兼容情况：</p><table><thead><tr><th>特性</th><th>Chrome</th><th>Firefox</th><th>IE</th><th>Opera</th><th>Safari</th></tr></thead><tbody><tr><td>localStorage</td><td>4</td><td>3.5</td><td>8</td><td>10.50</td><td>4</td></tr><tr><td>sessionStorage</td><td>5</td><td>2</td><td>8</td><td>10.50</td><td>4</td></tr></tbody></table><h1 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h1><table><thead><tr><th>特性</th><th>Cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>数据的生命期</td><td>可设置失效时间，默认是关闭浏览器后失效</td><td>除非被清除，否则永久保存</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr><tr><td>存放数据大小</td><td>4K左右</td><td>一般为5MB</td><td>一般为5MB</td></tr><tr><td>与服务器端通信</td><td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td><td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>需要程序员自己封装，源生的Cookie接口不友好</td><td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td><td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td></tr></tbody></table><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>1.Cookie<br>针对登录过的用户，服务器端会在他登录时往 Cookie 中插入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦。</p><p>2.web storage<br>localStorage可以存储用户本地浏览的记录等。如果遇到一些内容特别多的表单，为了优化用户体验，我们可能要把表单页面拆分成多个子页面，然后按步骤引导用户填写。这时候 sessionStorage 的作用就发挥出来了。</p><h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><p>需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的。使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。因为只要打开控制台，你就随意修改它们的值，也就是说如果你的网站中有 XSS 的风险，它们就能对你的 localStorage 肆意妄为。所以千万不要用它们存储你系统中的敏感数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;1.&lt;strong&gt;Cookie&lt;/strong&gt;&lt;br&gt;网站为了辨别用户身份而储存在用户本地终端上的数据（通常经过加密）&lt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="storage" scheme="http://yoursite.com/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>开篇博客</title>
    <link href="http://yoursite.com/2017/03/01/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/03/01/第一篇博客/</id>
    <published>2017-03-01T15:25:05.000Z</published>
    <updated>2017-11-01T02:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Start-now"><a href="#Start-now" class="headerlink" title="Start now"></a>Start now</h1><p>从研究生毕业到现在已有一年有余，在职场中，从一个前端小白逐渐成长为可以挑起业务项目的前端大白。虽然项目经验慢慢积累起来，但是深知前端水很深，有太多未知的东西需要慢慢去探索。偶然机会遨游Github之中，发现Hexo博客之美，竟爱上记录一些事情。虽然这里只有我知道，但文字总是强大的，文字承载的不仅是知识，更是那一刻的心情。</p><p>工作或是学习中，总会遇到一些问题，希望在这里，能够对自己答疑解惑，也希望自己能越来越优秀。</p><h1 id="定一个小目标"><a href="#定一个小目标" class="headerlink" title="定一个小目标"></a>定一个小目标</h1><p>一周一篇博文，技术或是吐槽，只要愿意记录，都可以</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Start-now&quot;&gt;&lt;a href=&quot;#Start-now&quot; class=&quot;headerlink&quot; title=&quot;Start now&quot;&gt;&lt;/a&gt;Start now&lt;/h1&gt;&lt;p&gt;从研究生毕业到现在已有一年有余，在职场中，从一个前端小白逐渐成长为可以挑起业务项目的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to maintain HexoBlog</title>
    <link href="http://yoursite.com/2017/02/01/hello-world/"/>
    <id>http://yoursite.com/2017/02/01/hello-world/</id>
    <published>2017-02-01T02:00:00.000Z</published>
    <updated>2017-10-29T13:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
