<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying my idea</title>
  
  <subtitle>Welcome to my sweet home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-20T14:26:07.580Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xin Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Charles手机抓包</title>
    <link href="http://yoursite.com/2018/03/20/%E4%BD%BF%E7%94%A8Charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/"/>
    <id>http://yoursite.com/2018/03/20/使用Charles手机抓包/</id>
    <published>2018-03-20T13:47:51.000Z</published>
    <updated>2018-03-20T14:26:07.580Z</updated>
    
    <content type="html"><![CDATA[<p>在进行web touch端开发时，需要捕获请求接口分析，对数据的正确性分析。此时有必要通过抓包工具抓取数据包，本文分析使用Charles达到抓包目的。</p><h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h1><p><a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles官网</a></p><p>Charles天生适合抓取移动端数据包，它会在PC侧设置为系统的网络代理服务器，使得所有的网络访问都通过它来完成。它可以抓取HTTP和HTTPS请求。</p><p><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="external">这里有详细安装设置教程</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>教程中对安装设置已经很详细，但是我在设置HTTPS抓包始终有问题，包都是unkonwn的，说明安装在手机端的证书没有生效。</p><p>如果你的手机现在是 10.3 以上系统，但是之前手机是 10.3 以下的系统，并且你以前用 Charles 调试过，那么你就不会出现“SSLHandshake: Received fatal alert: unknown_ca”的问题。如果你是第一次用 10.3 以上系统手机去调试，你就出问题了。当你按照正常步骤把一切证书安装好后，发现调试 HTTPS 的时候全是x，抓不到包。</p><p>我明明安装了 Charles 的证书，为什么抓 HTTPS 包会失败呢？因为 10.3 以上系统需要你在“证书信任设置”中信任 Charles 的证书。</p><p>通用 -&gt; 关于本机 -&gt; 证书信任设置 -&gt; 选择 Charles 的证书打开<br><img src="/img/charles5.png" alt=""></p><p>问题点<a href="https://www.ianisme.com/ios/2502.html" target="_blank" rel="external">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进行web touch端开发时，需要捕获请求接口分析，对数据的正确性分析。此时有必要通过抓包工具抓取数据包，本文分析使用Charles达到抓包目的。&lt;/p&gt;
&lt;h1 id=&quot;Charles&quot;&gt;&lt;a href=&quot;#Charles&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>零散知识点</title>
    <link href="http://yoursite.com/2018/02/23/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/02/23/零散知识点/</id>
    <published>2018-02-23T09:17:49.000Z</published>
    <updated>2018-02-23T09:23:48.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h1><p>REST本身是一个很复杂的概念，是Roy Fielding的博士毕业论文，全文在此<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">点击</a></p><p>引申而来的Restful API设计方案则是我们需要关心的，基本规范总结为</p><blockquote><p><strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p></blockquote><p>有兴趣的可以读读阮一峰老师的博文<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a>,基本符合RESTful接口设计方案</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Restful-API&quot;&gt;&lt;a href=&quot;#Restful-API&quot; class=&quot;headerlink&quot; title=&quot;Restful API&quot;&gt;&lt;/a&gt;Restful API&lt;/h1&gt;&lt;p&gt;REST本身是一个很复杂的概念，是Roy Fielding的博士毕业
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript模块化开发</title>
    <link href="http://yoursite.com/2018/02/22/Javascript%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/02/22/Javascript模块化开发/</id>
    <published>2018-02-22T08:01:57.000Z</published>
    <updated>2018-02-22T08:16:26.748Z</updated>
    
    <content type="html"><![CDATA[<p>按以下模式去封装一些方法和变化是较好的实践：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UTIL = (<span class="function"><span class="keyword">function</span> (<span class="params">parent, $</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> my = parent.ajax = parent.ajax || &#123;&#125;;</div><div class="line"></div><div class="line">my.get = <span class="function"><span class="keyword">function</span> (<span class="params">url, params, callback</span>) </span>&#123;</div><div class="line"><span class="comment">// ok, so I'm cheating a bit :)</span></div><div class="line"><span class="keyword">return</span> $.getJSON(url, params, callback);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// etc...</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> parent;</div><div class="line">&#125;(UTIL || &#123;&#125;, jQuery));</div></pre></td></tr></table></figure><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a></li><li><a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html" target="_blank" rel="external">JavaScript Module Pattern: In-Depth</a></li><li><a href="https://seajs.github.io/seajs/docs/#intro" target="_blank" rel="external">SeaJS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按以下模式去封装一些方法和变化是较好的实践：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node框架——Express,Koa,Egg</title>
    <link href="http://yoursite.com/2018/02/01/Node%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Express-Koa-Egg/"/>
    <id>http://yoursite.com/2018/02/01/Node框架——Express-Koa-Egg/</id>
    <published>2018-02-01T10:38:49.000Z</published>
    <updated>2018-02-02T07:39:29.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><blockquote><p>简单，门槛低，快速</p></blockquote><p><a href="https://github.com/expressjs/express" target="_blank" rel="external">项目地址</a> 36000+ stars<br><a href="http://expressjs.com/" target="_blank" rel="external">官网</a>  <a href="http://www.expressjs.com.cn/" target="_blank" rel="external">中文网站</a></p><p>提供了对Nodejs API的简单封装，帮助开发者快速构建web应用，准入门槛低。<br>使用<a href="https://expressjs.com/en/starter/generator.html" target="_blank" rel="external">Express application generator</a>脚手架工具可以快速生成Express应用</p><p>通过使用 Node Express，你可以实现中间件来响应 http 请求，可以定义路由表来定义对不同请求的响应函数，还可以使用模板引擎来输出 html 页面。</p><h1 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h1><blockquote><p>洋葱圈中间件机制，高度可扩展性</p></blockquote><p><a href="https://github.com/koajs/koa" target="_blank" rel="external">项目地址</a> 19000+ stars<br><a href="http://koajs.com/" target="_blank" rel="external">官网</a>  <a href="https://koa.bootcss.com/" target="_blank" rel="external">中文网站</a></p><p>KOA 框架的核心是 ES6 的 generator。KOA 使用 generator 来实现中间件的流程控制，使用try/catch 来增强异常处理，同时在 KOA 框架中你再也看不到复杂的 callback 回调了。<br>在Node发布V8版本后，支持了<code>async``await</code>语法，使得Koa应用的编写更加清晰。</p><p>许多 JavaScript/Node.js 的忠实开发者都开始选择使用 KOA 来开发新的项目，因为 KOA 提供了更多的灵活性开发应用程序。</p><h1 id="Meteor"><a href="#Meteor" class="headerlink" title="Meteor"></a>Meteor</h1><blockquote><p>挺全面的，全面到已经把你想到的问题都解决了。它集成了Anjularjs,React,MongoDB,Cordova</p></blockquote><p><a href="https://github.com/meteor/meteor/" target="_blank" rel="external">项目地址</a> 39000+ stars<br><a href="https://www.meteor.com/" target="_blank" rel="external">官网</a></p><p><a href="http://zh.discovermeteor.com/" target="_blank" rel="external">Discover Meteor</a></p><h1 id="EggJS"><a href="#EggJS" class="headerlink" title="EggJS"></a>EggJS</h1><blockquote><p>阿里巴巴提出的一个企业级框架与应用，基于Koa<br>“约定优于配置”</p></blockquote><p><a href="https://github.com/eggjs/egg/" target="_blank" rel="external">项目地址</a>  6800+ stars<br><a href="https://eggjs.org" target="_blank" rel="external">官网</a></p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="https://www.zhihu.com/question/20296322/answer/79431097" target="_blank" rel="external">Meteor.js 是什么？ - wolf3c的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/50526101/answer/144952130" target="_blank" rel="external">如何评价阿里开源的企业级 Node.js 框架 EggJS？ - 天猪的回答 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/31640541" target="_blank" rel="external">EggJS 2.0 正式发布，性能提升 30%，拥抱 Async</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简单，门槛低，快速&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>PM2——node进程管理器</title>
    <link href="http://yoursite.com/2018/01/31/PM2%E2%80%94%E2%80%94node%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://yoursite.com/2018/01/31/PM2——node进程管理器/</id>
    <published>2018-01-31T08:50:24.000Z</published>
    <updated>2018-02-01T07:32:46.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h1><p>Advanced, production process manager for node.js<br><a href="http://pm2.keymetrics.io/" target="_blank" rel="external">官网</a></p><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><ul><li><p>热重载<br>不需要停机，0秒重载进程 (是否可以记住应用当前的状态呢？如内存中的变量等)</p></li><li><p>日志集成<br>可查看应用在存活期间的日志，特别是error log信息</p></li><li><p><a href="http://pm2.keymetrics.io/docs/usage/pm2-api/" target="_blank" rel="external">API</a> —— 脚本化管理进程<br>可以做到脚本化管理应用</p></li><li><p>Teminal Monitoring<br>终端监控</p></li><li><p>原生集群化支持，多进程管理</p></li><li><p>PM2可配置化<br>JS/JSON配置文件</p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure><p>当完成安装后，pm2会在<code>$HOME</code>下新建pm2文件夹：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$HOME/.pm2            与pm2相关的所有文件</div><div class="line">$HOME/.pm2/logs       存放所有应用的日志  appname-error-id.log  appname-out-id.log</div><div class="line">$HOME/.pm2/pids       所有应用pids</div><div class="line">$HOME/.pm2/pm2.log    pm2的使用日志</div><div class="line">$HOME/.pm2/pm2.pid    pm2的pid</div><div class="line">$HOME/.pm2/rpc.sock   远程连接socket文件</div><div class="line">$HOME/.pm2/pub.sock   远程连接相关</div><div class="line">$HOME/.pm2/conf.js    pm2的配置文件</div></pre></td></tr></table></figure><p>运行<code>pm2 logs</code>可以从以上文件中读取到相关应用的日志和pm2日志</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul><li><p><code>pm2 start app.js -i 4</code><br>后台运行pm2，启动4个app.js ，也可以把’max’ 参数传递给 start，正确的进程数目依赖于Cpu的核心数目</p></li><li><p><code>pm2 start app.js --name my-api</code><br>命名进程</p></li><li><p><code>pm2 list</code><br>显示所有进程状态</p></li><li><p><code>pm2 monit</code><br>监视所有进程</p></li><li><p><code>pm2 logs</code><br>显示所有进程日志</p></li><li><p><code>pm2 stop all</code><br>停止所有进程, 可以指定id停止特定进程，id可在list中查看到</p></li><li><p><code>pm2 restart all</code><br>重启所有进程，可指定id</p></li><li><p><code>pm2 reload all</code><br>0秒停机重载进程，可指定id</p></li><li><p><code>pm2 delete all</code><br>杀死所有进程</p></li></ul><p>通过配置文件启动进程：<br><code>pm2 start run.json</code></p><p>我们可以运行<code>pm2 ecosystem</code>,会在项目目录下生成pm2的配置文件<code>ecosystem.config.js</code><br>一般配置文件如下格式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Application configuration section</span></div><div class="line"><span class="comment">   * http://pm2.keymetrics.io/docs/usage/application-declaration/</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  apps : [</div><div class="line"></div><div class="line">    <span class="comment">// First application</span></div><div class="line">    &#123;</div><div class="line">      name      : <span class="string">'API'</span>,</div><div class="line">      script    : <span class="string">'app.js'</span>,</div><div class="line">      env: &#123;</div><div class="line">        COMMON_VARIABLE: <span class="string">'true'</span></div><div class="line">      &#125;,</div><div class="line">      env_production : &#123;</div><div class="line">        NODE_ENV: <span class="string">'production'</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// Second application</span></div><div class="line">    &#123;</div><div class="line">      name      : <span class="string">'WEB'</span>,</div><div class="line">      script    : <span class="string">'web.js'</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Deployment section</span></div><div class="line"><span class="comment">   * http://pm2.keymetrics.io/docs/usage/deployment/</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  deploy : &#123;</div><div class="line">    production : &#123;</div><div class="line">      user : <span class="string">'node'</span>,</div><div class="line">      host : <span class="string">'212.83.163.1'</span>,</div><div class="line">      ref  : <span class="string">'origin/master'</span>,</div><div class="line">      repo : <span class="string">'git@github.com:repo.git'</span>,</div><div class="line">      path : <span class="string">'/var/www/production'</span>,</div><div class="line">      <span class="string">'post-deploy'</span> : <span class="string">'npm install &amp;&amp; pm2 reload ecosystem.config.js --env production'</span></div><div class="line">    &#125;,</div><div class="line">    dev : &#123;</div><div class="line">      user : <span class="string">'node'</span>,</div><div class="line">      host : <span class="string">'212.83.163.1'</span>,</div><div class="line">      ref  : <span class="string">'origin/master'</span>,</div><div class="line">      repo : <span class="string">'git@github.com:repo.git'</span>,</div><div class="line">      path : <span class="string">'/var/www/development'</span>,</div><div class="line">      <span class="string">'post-deploy'</span> : <span class="string">'npm install &amp;&amp; pm2 reload ecosystem.config.js --env dev'</span>,</div><div class="line">      env  : &#123;</div><div class="line">        NODE_ENV: <span class="string">'dev'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>以上配置文件，会启动三个不同应用，各个应用会有不同配置<br>配置文件如何配置，请访问官网<a href="http://pm2.keymetrics.io/docs/usage/cluster-mode/" target="_blank" rel="external">配置</a>部分</p><p>运行<code>pm2 deploy &lt;configuration_file&gt; &lt;environment&gt; &lt;command&gt;</code>,发布配置任务</p><p>apps中可配置的项目：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">name  应用进程名称；</div><div class="line">script  启动脚本路径；</div><div class="line">cwd  应用启动的路径，关于script与cwd的区别举例说明：在/home/polo/目录下运行/data/release/node/</div><div class="line">index.js，此处script为/data/release/node/index.js，cwd为/home/polo/；</div><div class="line">args  传递给脚本的参数；</div><div class="line">interpreter  指定的脚本解释器；</div><div class="line">interpreter_args  传递给解释器的参数；</div><div class="line">instances  应用启动实例个数，仅在cluster模式有效，默认为fork；</div><div class="line">exec_mode  应用启动模式，支持fork和cluster模式；</div><div class="line">watch  监听重启，启用情况下，文件夹或子文件夹下变化应用自动重启；</div><div class="line">ignore_watch  忽略监听的文件夹，支持正则表达式；</div><div class="line">max_memory_restart  最大内存限制数，超出自动重启；</div><div class="line">env  环境变量，object类型，如&#123;<span class="string">"NODE_ENV"</span>:<span class="string">"production"</span>, <span class="string">"ID"</span>: <span class="string">"42"</span>&#125;；</div><div class="line">log_date_format  指定日志日期格式，如YYYY-MM-DD HH:mm:ss；</div><div class="line">error_file  记录标准错误流，默认$HOME/.pm2/logs/XXXerr.log，代码错误可在此文件查找；</div><div class="line">out_file  记录标准输出流，默认$HOME/.pm2/logs/XXXout.log)，如应用打印大量的标准输出，会导致pm2日志过大；</div><div class="line">min_uptime  应用运行少于时间被认为是异常启动；</div><div class="line">max_restarts  最大异常重启次数，即小于min_uptime运行时间重启次数；</div><div class="line">autorestart  默认为<span class="literal">true</span>, 发生异常的情况下自动重启；</div><div class="line">cron_restart  crontab时间格式重启应用，目前只支持cluster模式；</div><div class="line">force  默认<span class="literal">false</span>，如果<span class="literal">true</span>，可以重复启动一个脚本。pm2不建议这么做；</div><div class="line">restart_delay  异常重启情况下，延时重启时间；</div></pre></td></tr></table></figure></p><h1 id="其他用途"><a href="#其他用途" class="headerlink" title="其他用途"></a>其他用途</h1><p>执行<code>pm2 start app.js --watch</code>后，pm2会监听当前目录的所有文件，如果文件发生变化，pm2会重新启动应用。<br>可以配置监听特定文件夹的文件，这样在我们开发node应用时，可以做到热启动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"watch"</span>: [<span class="string">"server"</span>, <span class="string">"client"</span>],</div><div class="line">  <span class="string">"ignore_watch"</span> : [<span class="string">"node_modules"</span>, <span class="string">"client/img"</span>],</div><div class="line">  <span class="string">"watch_options"</span>: &#123;</div><div class="line">    <span class="string">"followSymlinks"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/20940096" target="_blank" rel="external">一个pm2部署的案例</a> From 知乎专栏</li></ul><p>WRK???<br>ab命令 —— apache的http压力测试工具</p><blockquote><p>ab的全称是ApacheBench，是Apache附带的一个小工具，用于进行HTTP服务器的性能测试，可以同时模拟多个并发请求。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PM2&quot;&gt;&lt;a href=&quot;#PM2&quot; class=&quot;headerlink&quot; title=&quot;PM2&quot;&gt;&lt;/a&gt;PM2&lt;/h1&gt;&lt;p&gt;Advanced, production process manager for node.js&lt;br&gt;&lt;a href=&quot;http:
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node多线程开发</title>
    <link href="http://yoursite.com/2018/01/24/Node%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/01/24/Node多线程开发/</id>
    <published>2018-01-24T11:52:10.000Z</published>
    <updated>2018-02-22T01:59:51.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h1><p>Node.js选择V8作为它的执行引擎，</p><ul><li>高性能<br>首先，单线程避免了传统PHP那样频繁创建、切换线程的开销，使执行速度更加迅速。<br>第二，资源占用小，如果有对Node.js的web服务器做过压力测试的朋友可能发现，Node.js在大负荷下对内存占用仍然很低，同样的负载PHP因为一个请求一个线程的模型，将会占用大量的物理内存，很可能会导致服务器因物理内存耗尽而频繁交换，失去响应。</li></ul><ul><li><p>线程安全<br>避免多线程竞争资源，造成死锁的问题。降低开发者对资源加锁解锁的风险。</p></li><li><p>异步与非阻塞<br>其实Node.js在底层访问I/O还是多线程的，有兴趣的朋友可以翻看Node.js的fs模块的源码，里面会用到libuv来处理I/O，所以在我们看来Node.js的代码就是非阻塞和异步形式的。</p></li></ul><p>因为单线程的缘故，node.js本身是不适合处理CPU密集型的应用的，比如涉及大量科学计算的应用等。所以node.js是否也可以做到多线程呢？答案是可以的</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>即便是在目前多核CPU的场景，node.js本身仍只能利用一个cpu运行。</p><h2 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h2><p>设计四个对比实验：</p><ol><li>node程序单线程，pm2单线程</li><li>node多线程，pm2单线程</li><li>node单线程，pm2多线程</li><li>node多线程，pm2多线程</li></ol><p>node的程序是一个计算Fibonacci的程式（递归算法），它属于CPU密集型计算，由此模拟出当服务器CPU被科学计算霸占时，如何做到快速响应其他请求</p><p>node单线程服务器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fibo = <span class="function"><span class="keyword">function</span> <span class="title">fibo</span> (<span class="params">n</span>) </span>&#123;<span class="comment">//定义斐波那契数组算法</span></div><div class="line">   <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n = fibo(~~req.query.n || <span class="number">1</span>);<span class="comment">//接收参数</span></div><div class="line">  res.send(n.toString());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8125</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'listen on 8125'</span>);</div></pre></td></tr></table></figure></p><p>node多线程——用cluster来启动多个进程:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);<span class="comment">//加载cluster模块</span></div><div class="line"><span class="keyword">var</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;<span class="comment">//设定启动进程数为cpu个数</span></div><div class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</div><div class="line">    cluster.fork();<span class="comment">//启动子进程</span></div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line">    <span class="keyword">var</span> app = express();</div><div class="line">    <span class="keyword">var</span> fibo = <span class="function"><span class="keyword">function</span> <span class="title">fibo</span> (<span class="params">n</span>) </span>&#123;<span class="comment">//定义斐波那契数组算法</span></div><div class="line">       <span class="keyword">return</span> n &gt; <span class="number">1</span> ? fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>) : <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> n = fibo(~~req.query.n || <span class="number">1</span>);<span class="comment">//接收参数</span></div><div class="line">      res.send(n.toString());</div><div class="line">    &#125;);</div><div class="line">    app.listen(<span class="number">8124</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'listen on 8124'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用ab命令进行压测<br><code>ab -c 100 -n 100 http://10.249.5.27:8124/?n=35</code></p><blockquote><p>物理机：8 QEMU Virtual CPU version (cpu64-rhel6)  8核处理器</p></blockquote><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>本地电脑——四核处理器</p><ul><li>第一组：node程序单线程，pm2单线程<br>单个线程处理了100个请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Requests per second:    8.06 [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">12414.219</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">124.142</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">1.62</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+<span class="regexp">/-sd] median   max</span></div><div class="line"><span class="regexp">Connect:        2    3   0.9      3       5</span></div><div class="line"><span class="regexp">Processing:   141 6274 3599.2   6372   12408</span></div><div class="line"><span class="regexp">Waiting:      141 6273 3599.3   6372   12408</span></div><div class="line"><span class="regexp">Total:        146 6277 3598.4   6375   12410</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></div><div class="line"><span class="regexp">  50%   6375</span></div><div class="line"><span class="regexp">  66%   8312</span></div><div class="line"><span class="regexp">  75%   9400</span></div><div class="line"><span class="regexp">  80%  10022</span></div><div class="line"><span class="regexp">  90%  11309</span></div><div class="line"><span class="regexp">  95%  11923</span></div><div class="line"><span class="regexp">  98%  12287</span></div><div class="line"><span class="regexp">  99%  12410</span></div><div class="line"><span class="regexp"> 100%  12410 (longest request)</span></div></pre></td></tr></table></figure><ul><li>第二组：node程序单线程，pm2多线程<br>每个线程处理了25个请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Requests per second:    10.91 [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">9165.958</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">91.660</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">2.19</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+<span class="regexp">/-sd] median   max</span></div><div class="line"><span class="regexp">Connect:        2    3   0.7      3       4</span></div><div class="line"><span class="regexp">Processing:   313 4660 2683.0   4677    9160</span></div><div class="line"><span class="regexp">Waiting:      313 4660 2682.8   4677    9160</span></div><div class="line"><span class="regexp">Total:        318 4663 2682.3   4680    9162</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></div><div class="line"><span class="regexp">  50%   4680</span></div><div class="line"><span class="regexp">  66%   6213</span></div><div class="line"><span class="regexp">  75%   6985</span></div><div class="line"><span class="regexp">  80%   7453</span></div><div class="line"><span class="regexp">  90%   8468</span></div><div class="line"><span class="regexp">  95%   8945</span></div><div class="line"><span class="regexp">  98%   9130</span></div><div class="line"><span class="regexp">  99%   9162</span></div><div class="line"><span class="regexp"> 100%   9162 (longest request)</span></div></pre></td></tr></table></figure><ul><li>第三组：node多线程，pm2单线程<br>每个线程处理了25个请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Requests per second:    10.95 [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">9135.305</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">91.353</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">2.20</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+<span class="regexp">/-sd] median   max</span></div><div class="line"><span class="regexp">Connect:        6   14   3.5     14      17</span></div><div class="line"><span class="regexp">Processing:   333 4670 2687.3   4664    9116</span></div><div class="line"><span class="regexp">Waiting:      332 4670 2687.5   4664    9116</span></div><div class="line"><span class="regexp">Total:        340 4684 2688.3   4680    9129</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></div><div class="line"><span class="regexp">  50%   4680</span></div><div class="line"><span class="regexp">  66%   6257</span></div><div class="line"><span class="regexp">  75%   6988</span></div><div class="line"><span class="regexp">  80%   7559</span></div><div class="line"><span class="regexp">  90%   8432</span></div><div class="line"><span class="regexp">  95%   8835</span></div><div class="line"><span class="regexp">  98%   9127</span></div><div class="line"><span class="regexp">  99%   9129</span></div><div class="line"><span class="regexp"> 100%   9129 (longest request)</span></div></pre></td></tr></table></figure><ul><li>第四组：node多线程，pm2多线程<br>每个线程处理了25个请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Requests per second:    10.17 [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">9831.550</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">98.315</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">2.05</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+<span class="regexp">/-sd] median   max</span></div><div class="line"><span class="regexp">Connect:        2    6   1.8      5       8</span></div><div class="line"><span class="regexp">Processing:   383 5051 2861.0   5065    9821</span></div><div class="line"><span class="regexp">Waiting:      383 5051 2861.0   5064    9821</span></div><div class="line"><span class="regexp">Total:        391 5057 2859.2   5070    9823</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></div><div class="line"><span class="regexp">  50%   5070</span></div><div class="line"><span class="regexp">  66%   6683</span></div><div class="line"><span class="regexp">  75%   7562</span></div><div class="line"><span class="regexp">  80%   8104</span></div><div class="line"><span class="regexp">  90%   9016</span></div><div class="line"><span class="regexp">  95%   9483</span></div><div class="line"><span class="regexp">  98%   9777</span></div><div class="line"><span class="regexp">  99%   9823</span></div><div class="line"><span class="regexp"> 100%   9823 (longest request)</span></div></pre></td></tr></table></figure><blockquote><p>实验结果名称解释<br>Requests per second  服务器每秒处理的请求数<br>Time per request:       9831.550 [ms] (mean)   平均每个请求处理的时间<br>Time per request:       98.315 [ms] (mean, across all concurrent requests)  平均每个请求的等待间隙时间</p></blockquote><p>同样的，我也在拥有8核处理器的物理机上做了两组实验：</p><ol><li><p>node程序单线程，pm2单线程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Requests per second:    8.01 [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">12487.559</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">124.876</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">1.61</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+<span class="regexp">/-sd] median   max</span></div><div class="line"><span class="regexp">Connect:        1    1   0.3      1       1</span></div><div class="line"><span class="regexp">Processing:   148 6339 3612.4   6409   12486</span></div><div class="line"><span class="regexp">Waiting:      146 6339 3612.5   6409   12486</span></div><div class="line"><span class="regexp">Total:        149 6340 3612.2   6410   12486</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></div><div class="line"><span class="regexp">  50%   6410</span></div><div class="line"><span class="regexp">  66%   8405</span></div><div class="line"><span class="regexp">  75%   9518</span></div><div class="line"><span class="regexp">  80%  10136</span></div><div class="line"><span class="regexp">  90%  11372</span></div><div class="line"><span class="regexp">  95%  11989</span></div><div class="line"><span class="regexp">  98%  12363</span></div><div class="line"><span class="regexp">  99%  12486</span></div><div class="line"><span class="regexp"> 100%  12486 (longest request)</span></div></pre></td></tr></table></figure></li><li><p>node多线程，pm2多线程<br>平均每个线程处理了13个请求</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Requests per second:    49.50 [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">2020.015</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">20.200</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">9.96</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+<span class="regexp">/-sd] median   max</span></div><div class="line"><span class="regexp">Connect:        1    1   0.2      1       1</span></div><div class="line"><span class="regexp">Processing:   159 1047 544.9   1035    2018</span></div><div class="line"><span class="regexp">Waiting:      157 1046 545.2   1034    2018</span></div><div class="line"><span class="regexp">Total:        161 1047 544.7   1035    2019</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">Percentage of the requests served within a certain time (ms)</span></div><div class="line"><span class="regexp">  50%   1035</span></div><div class="line"><span class="regexp">  66%   1319</span></div><div class="line"><span class="regexp">  75%   1542</span></div><div class="line"><span class="regexp">  80%   1599</span></div><div class="line"><span class="regexp">  90%   1824</span></div><div class="line"><span class="regexp">  95%   1878</span></div><div class="line"><span class="regexp">  98%   1954</span></div><div class="line"><span class="regexp">  99%   2019</span></div><div class="line"><span class="regexp"> 100%   2019 (longest request)</span></div></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>如果node程序对进程间通信没有要求，那么尽量node写单线程程序，而使用pm2开启多线程即可.<br>这样减少代码出错风险，增加可运维性</p><p>即便是CPU密集型运算，开启多线程后，仍然可以以较快速度完成运算并返回结果。这是V8引擎和多线程共同带来的特性。</p><h2 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h2><h2 id="守护你的进程"><a href="#守护你的进程" class="headerlink" title="守护你的进程"></a>守护你的进程</h2><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>Node是单线程的，那么不可避免会出现宕机的情况。那么如何守护好进程呢？需要从错误机制上分析</p><p>Node中处理事件一般会用回调来实现异步操作的流程，在同步过程中出错，node会抛出相应错误。如果此时没有捕获到这个错误，那么node就会停止运行</p><ol><li>Node提供捕获全局错误的方法：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">//打印出错误</span></div><div class="line">  <span class="built_in">console</span>.log(err);</div><div class="line">  <span class="comment">//打印出错误的调用栈方便调试</span></div><div class="line">  <span class="built_in">console</span>.log(err.stack)；</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><p>但不提倡使用它，因为你使用它，说明你对node并不熟，哈哈。不过这是个备胎方法</p><ol><li><p>在可能出错的地方捕获异常<br>即使用<code>try{}catch(e){}</code>语法</p></li><li><p>中间件监听<br>这里需要配合Node服务框架来完成，如<code>Express</code>,<code>Koa</code>等，有一些好用的中间件监听错误，并得到及时处理，不至于宕机</p></li></ol><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p>当服务宕机后，可以立即重启，目前有以下工具可以使用</p><ol><li><a href="https://github.com/foreverjs/forever" target="_blank" rel="external">node-forever</a></li><li><a href="http://pm2.keymetrics.io/" target="_blank" rel="external">pm2</a></li><li><a href="http://supervisord.org/" target="_blank" rel="external">supervisor</a></li></ol><p>通过benchmark实验，当使用<code>pm2 reload/restart</code>重启进程时，可以在100ms以内完成重启（会因应用复杂情况有所不同）。如果该应用设计到内存数据缓存，则缓存会在重启时丢失。在客户端请求中，重启期间会断开连接，由于重启时间很短，对用户是无感的（登录状态会丢失）。因此，可以考虑将内存数据在重启前存入数据库或本地文件中，在重启后重新读入。</p><p>结论：pm2可以在用户无感情况下完成对应用的重启。</p><h3 id="日志收集"><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h3><p>方案：</p><ol><li>异常捕获后，可以将错误信息存储于本地数据表中或存于文件系统中，或者通过发码实时监测</li><li>在使用重启服务工具时，本身也可以获取到相应日志用于分析。具体信息请访问官网</li></ol><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="https://github.com/DoubleSpout/threadAndPackage/blob/master/chapter.7.thread_and_process.md" target="_blank" rel="external">Node进程</a></li><li><a href="http://ourjs.com/detail/5417e6ea4f1286640f000002" target="_blank" rel="external">拿什么守护你的Node.JS进程： Node出错崩溃了怎么办？</a></li><li><a href="https://github.com/jawil/blog/issues/7" target="_blank" rel="external">关于Node进程管理器PM2使用技巧和需要注意的地方</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h1&gt;&lt;p&gt;Node.js选择V8作为它的执行引擎，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高性能&lt;br&gt;首先，单线程避免了传统PHP那样频繁创建、切换线程
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>eslint——规范你的代码</title>
    <link href="http://yoursite.com/2018/01/02/eslint%E2%80%94%E2%80%94%E8%A7%84%E8%8C%83%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/01/02/eslint——规范你的代码/</id>
    <published>2018-01-02T03:40:46.000Z</published>
    <updated>2018-02-02T07:47:16.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h1><p>ESLint是目前比较流行的js检查工具，它利用AST处理规则，虽然速度上不及JSLint，但做到了规则完全可配置，收到广泛欢迎。下图看出它们的下载趋势：</p><p><img src="/img/eslint下载趋势.jpg" alt=""></p><p>ESLint的目标是提供一个插件化的javascript代码检测工具</p><h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><h2 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h2><p>一般使用eslint都是搭配项目的，因此本地安装是首选</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.安装</span></div><div class="line">yarn add -D eslint</div><div class="line"></div><div class="line"><span class="comment">// 2.生成配置文件</span></div><div class="line">./node_modules/.bin/eslint --init </div><div class="line">执行该命令后会进入一个eslint配置的选择题过程，按你的需求简单配置即可，配置内容后面还是可以修改的</div><div class="line"></div><div class="line"><span class="comment">// 3.检测你的js文件</span></div><div class="line">./node_modules/.bin/eslint yourfile.js</div></pre></td></tr></table></figure><p>与eslint搭配使用的插件也需要本地安装，谁用谁负责安装，哈哈</p><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><p>与local类似，仅仅是命令可以全局调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g eslint</div></pre></td></tr></table></figure></p><h2 id="与webpack集成"><a href="#与webpack集成" class="headerlink" title="与webpack集成"></a>与webpack集成</h2><p>单独使用eslint的话，你需要每次都要手动去调起<code>eslint xxx.js</code>，非常麻烦，可以配合构建工具一起使用会更加的方便。<br>以下与webpack搭配使用（谁叫webpack太火了呢）</p><p>首先安装<code>[eslint-loader](https://www.npmjs.com/package/eslint-loader)</code>以及<code>babel-eslint</code>,后者是更改eslint的解析器，配合babel使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn add -D eslint-loader babel-eslint</div></pre></td></tr></table></figure><p>在<code>.eslintrc</code>中配置如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">    <span class="string">"env"</span>:&#123;</div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"commonjs"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>上面提到eslint强大的能力提现在它的可配置性上，简单分析一下它可配置的特性</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>一个配置文件大致这个样子的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">    <span class="string">"env"</span>:&#123;</div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"commonjs"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</div><div class="line">    <span class="string">"globals"</span>: &#123;</div><div class="line">    <span class="string">"globalVar"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"rules"</span>:&#123;</div><div class="line">    <span class="string">"no-console"</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><p>extends<br>告知eslint默认使用何种规则集合，一般我们使用<code>eslint:recommended</code>即可，或者其他业内规范，比如<code>airbnb</code>,<code>google</code>,<code>standard</code>。区别主要在（缩进、引号、换行等方面）<br>使用其他规范，则安装对应插件即可，如<code>eslint-config-airbnb</code>,<code>eslint-config-google</code></p></li><li><p>env<br>用于指定代码的运行环境，根据环境不同，规则也会不同.可以在<code>.eslintrc</code>中配置环境，也可以在单个文件中通过注释添加环境：<code>/* eslint-env node,mocha */</code></p></li></ul><p>常见环境配置项有<code>browser</code>,<code>node</code>,<code>es6</code>等.<br>具体环境可选项，可点击查看<a href="http://eslint.cn/docs/user-guide/configuring#specifying-environments" target="_blank" rel="external">Specifying Environments</a></p><ul><li>parser<br>ESLint 默认使用<code>Espree</code>作为其解析器，你可以在配置文件中指定一个不同的解析器。</li></ul><blockquote><p>这个值得研究一下，甚至可以自己写一个解析器。这是了解解析器的切入口</p></blockquote><ul><li><p>parserOptions<br>ESLint 允许你指定你想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。你可以覆盖该设置启用对 ECMAScript 其它版本和 JSX 的支持。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"parserOptions"</span>: &#123;</div><div class="line">    <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,   <span class="comment">// 支持ES6</span></div><div class="line">    <span class="string">"sourceType"</span>: <span class="string">"module"</span>,</div><div class="line">    <span class="string">"ecmaFeatures"</span>: &#123;</div><div class="line">        <span class="string">"jsx"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>rules<br>当我们配置<code>eslint:recommended</code>时，eslint会帮助默认开启一些规则，比如<code>no-console</code>指定在代码中不可以使用<code>console</code>。<br>此时，我们期望在开发模式下跳过校验，而在生产环境下开启校验，如上配置即可。多种配置方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"rules"</span>: &#123;</div><div class="line"><span class="string">"eqeqeq"</span>: <span class="string">"off"</span>,   <span class="comment">// 0</span></div><div class="line"><span class="string">"curly"</span>: <span class="string">"warn"</span>,   <span class="comment">// 1</span></div><div class="line"><span class="string">"quotes"</span>: [<span class="string">"error"</span>,<span class="string">"double"</span>] <span class="comment">// 2 (当被触发的时候，程序会退出)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>更多规则可以查看<a href="http://eslint.cn/docs/rules/" target="_blank" rel="external">eslint默认规则</a></p><ul><li>globals<br>默认情况下，eslint针对文件未定义的变量会提示错误或警告，例如应用中某个变量<code>globalVar</code>可以全局调用。则需要在<code>globals</code><br>true - 允许变量被重写<br>false - 不允许变量被重写</li></ul><hr><p>更多配置项可以前往<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="external">eslint配置页</a>查看</p><h1 id="扒代码"><a href="#扒代码" class="headerlink" title="扒代码"></a>扒代码</h1><p><a href="https://github.com/eslint/eslint" target="_blank" rel="external">eslint主页</a><br>未完待续</p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="http://eslint.cn/" target="_blank" rel="external">ESLint中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ESLint&quot;&gt;&lt;a href=&quot;#ESLint&quot; class=&quot;headerlink&quot; title=&quot;ESLint&quot;&gt;&lt;/a&gt;ESLint&lt;/h1&gt;&lt;p&gt;ESLint是目前比较流行的js检查工具，它利用AST处理规则，虽然速度上不及JSLint，但做到了规则完全
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6——Generator函数学习笔记</title>
    <link href="http://yoursite.com/2017/11/16/ES6%E2%80%94%E2%80%94Generator%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/16/ES6——Generator函数学习笔记/</id>
    <published>2017-11-16T08:09:59.000Z</published>
    <updated>2018-02-02T07:47:09.295Z</updated>
    
    <content type="html"><![CDATA[<p>本文是学习阮一峰的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">《ECMAScript6 入门》</a>的学习笔记</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Generator函数是ES6提供的一种异步编程解决方案</p><p>Generator 函数是一个状态机，封装了多个内部状态。</p><p>执行 Generator 函数会返回一个遍历器对象(Iterator)，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> <span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> g = gen()</div><div class="line"><span class="comment">// g.next() 返回的是一个包含value 和 done 的对象</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: 2, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: 3, done: true&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g.next())  <span class="comment">// &#123;value: undefined, done: true&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> val <span class="keyword">of</span> g)&#123;</div><div class="line">    <span class="built_in">console</span>.log(val)   <span class="comment">// 1  2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p><p>由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。</p><p>遍历器对象的next方法的运行逻辑如下:<br>（1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。<br>（2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。<br>（3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。<br>（4）如果该函数没有return语句，则返回的对象的value属性值为undefined。</p><p>yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。yield只可以使用在Generator函数中，出现在普通函数体内报错.yield表达式如果用在另一个表达式之中，必须放在圆括号里面</p><p>除了for…of循环以外，扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。</p><p>next()、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换yield表达式。</p><blockquote><p>next()是将yield表达式替换成一个值。<br>throw()是将yield表达式替换成一个throw语句<br>return()是将yield表达式替换成一个return语句。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> x + y;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> gen = g(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">gen.next(); <span class="comment">// Object &#123;value: 3, done: false&#125;</span></div><div class="line"></div><div class="line">gen.next(<span class="number">1</span>); <span class="comment">// Object &#123;value: 1, done: true&#125;</span></div><div class="line"><span class="comment">// 相当于将 let result = yield x + y</span></div><div class="line"><span class="comment">// 替换成 let result = 1;</span></div><div class="line"></div><div class="line">gen.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>)); <span class="comment">// Uncaught Error: 出错了</span></div><div class="line"><span class="comment">// 相当于将 let result = yield x + y</span></div><div class="line"><span class="comment">// 替换成 let result = throw(new Error('出错了'));</span></div><div class="line"></div><div class="line">gen.return(<span class="number">2</span>); <span class="comment">// Object &#123;value: 2, done: true&#125;</span></div><div class="line"><span class="comment">// 相当于将 let result = yield x + y</span></div><div class="line"><span class="comment">// 替换成 let result = return 2;</span></div></pre></td></tr></table></figure><h1 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield*表达式"></a>yield*表达式</h1><p>使用<code>yield*</code>表达式，在一个Generator函数中调用另一个Generator函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello!'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</div><div class="line">  <span class="keyword">yield</span> inner();</div><div class="line">  <span class="keyword">yield</span> <span class="string">'close'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = outer1()</div><div class="line">gen.next().value <span class="comment">// "open"</span></div><div class="line">gen.next().value <span class="comment">// 返回一个遍历器对象</span></div><div class="line">gen.next().value <span class="comment">// "close"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'open'</span></div><div class="line">  <span class="keyword">yield</span>* inner()</div><div class="line">  <span class="keyword">yield</span> <span class="string">'close'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = outer2()</div><div class="line">gen.next().value <span class="comment">// "open"</span></div><div class="line">gen.next().value <span class="comment">// "hello!"</span></div><div class="line">gen.next().value <span class="comment">// "close"</span></div></pre></td></tr></table></figure></p><p>从语法角度看，如果yield表达式后面跟的是一个遍历器对象，需要在yield表达式后面加上星号，表明它<strong>返回的是一个遍历器对象</strong>。这被称为yield<em>表达式。<br>实际上，任何数据结构只要有 Iterator 接口，就可以被yield</em>遍历。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> read = (<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">  <span class="keyword">yield</span>* <span class="string">'hello'</span>;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">read.next().value <span class="comment">// "hello"</span></div><div class="line">read.next().value <span class="comment">// "h"  因为字符串原生支持遍历器</span></div></pre></td></tr></table></figure></p><h1 id="Generator函数的this"><a href="#Generator函数的this" class="headerlink" title="Generator函数的this"></a>Generator函数的this</h1><p>Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的prototype对象上的方法。但如果把g当作普通的构造函数，并不会生效，因为g返回的总是遍历器对象，而不是this对象。<br>Generator 函数也不能跟new命令一起用，会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是学习阮一峰的&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《ECMAScript6 入门》&lt;/a&gt;的学习笔记&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; 
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>源码阅读——Redux</title>
    <link href="http://yoursite.com/2017/10/14/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94Redux/"/>
    <id>http://yoursite.com/2017/10/14/源码阅读——Redux/</id>
    <published>2017-10-14T01:50:20.000Z</published>
    <updated>2018-02-02T07:46:18.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为Redux"><a href="#何为Redux" class="headerlink" title="何为Redux"></a>何为Redux</h1><p>Redux是一个为JavaScript应用设计的可预测状态容器。GitHub官网是<a href="https://github.com/reactjs/redux" target="_blank" rel="external">https://github.com/reactjs/redux</a><br>严格的单向数据流动是Redux架构的核心</p><h1 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h1><p>Redux遵循三大原则：</p><ol><li>单一数据源<br>整个应用的state被储存在一棵object tree中，并且这个object tree只存在于唯一一个store中。<br>也就是说整个应用只有一个store，读取数据都是从这个store中进行</li><li>State是只读的<br>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。<br>action的作用仅仅表达一种修改的意向，整个应用的修改操作都被集中起来。我们可以对action进行记录追踪，方便调试观察。</li><li>使用纯函数进行修改<br>为了描述 action 如何改变 state tree ，你需要编写 reducers。<br>Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回<strong>新的 state</strong>。</li></ol><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>分析Redux的源码是很有趣的事情，Redux的源码很少，打包压缩后仅有2KB左右。它封装了几个关键的函数，就是这些函数应用了函数式编程的技巧，封装了私有变量，造就了Redux的三大原则。<br>PS:本博客中不分析参数检查部分的代码，有兴趣的可以去gitbub上看看</p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>顾名思义，createStore函数返回一个store对象，store对象上会定义一些应用使用的钩子函数，帮助操作内部封装隐藏的state</p><p>源码如下（有删减）:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建一个Store，来维护一颗状态树</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; reducer        纯函数，接受state和action，触发相应事件</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; preloadedState 初始state</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; enhancer       给第三方中间件使用，在Redux中指的是applyMiddleware</span></div><div class="line"><span class="comment"> * @return &#123;[type]&#125;                返回store，暴露公开API用于读取state，分发action，注册事件</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</div><div class="line">  <span class="comment">// 类型检查...</span></div><div class="line"></div><div class="line">  <span class="comment">//  私有变量，外界尽可以通过暴露出的API函数去修改这些私有变量</span></div><div class="line">  <span class="keyword">let</span> currentReducer = reducer</div><div class="line">  <span class="keyword">let</span> currentState = preloadedState</div><div class="line">  <span class="keyword">let</span> currentListeners = []</div><div class="line">  <span class="keyword">let</span> nextListeners = currentListeners</div><div class="line">  <span class="keyword">let</span> isDispatching = <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="comment">// 确保对nextListeners的操作不会影响到currentListeners</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</div><div class="line">      nextListeners = currentListeners.slice()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取当前的状态</span></div><div class="line">  <span class="comment">// 事实上，我们仍可以通过引用的形式去修改内部的state。如果你这样做了，那你就从一开始就没想清楚去使用redux</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> currentState</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 注册事件，所有事件会push到listeners数组中，在触发dispatch时依次执行</span></div><div class="line">  <span class="comment">// subscribe返回解除listener的函数，这里用到了闭包</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</div><div class="line">    <span class="comment">// 类型检查...</span></div><div class="line">    <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></div><div class="line"></div><div class="line">    ensureCanMutateNextListeners()</div><div class="line">    nextListeners.push(listener)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      isSubscribed = <span class="literal">false</span></div><div class="line"></div><div class="line">      ensureCanMutateNextListeners()</div><div class="line">      <span class="keyword">const</span> index = nextListeners.indexOf(listener)</div><div class="line">      nextListeners.splice(index, <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 核心函数，分发action，这是唯一可以改变state的途径</span></div><div class="line">  <span class="comment">// 它会将state和action传给reducer纯函数，reducer执行完毕后返回新的state</span></div><div class="line">  <span class="comment">// 请记住，dispatch是你应用时刻关注的钩子函数。因为只有它才能真正触发修改state的行为</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">    <span class="comment">// 类型检查...</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      isDispatching = <span class="literal">true</span></div><div class="line">      currentState = currentReducer(currentState, action)</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      isDispatching = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> listeners = currentListeners = nextListeners</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</div><div class="line">      <span class="keyword">const</span> listener = listeners[i]</div><div class="line">      listener()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> action</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 替换reducer</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</div><div class="line">    <span class="comment">// 类型检查...</span></div><div class="line">    currentReducer = nextReducer</div><div class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 暴露API</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    dispatch,</div><div class="line">    subscribe,</div><div class="line">    getState,</div><div class="line">    replaceReducer</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><p>如果应用比较简单，我们可以只写一个reducer，将所有的action都集中到一处去，之后参数传给createStore.<br>但是随着应用越来越大，你可能有很多action，如果都放入一个reducer中，显然变得不可维护。于是期望可以拆分reducer，每个reducer仅关心store tree中某个分支（即state中部分key），且仅返回这部分分支内容。其他分支内容你并不关心。<br>为了解决这个问题，Reudex提供了combineReducers函数。<br>combineReducers接受一个reducers对象，每一个key对应了一个reducer，这个key之后也将反应到state中。<br>比如你有一个postListReducer，这个reducer专门用来处理博客列表相关的操作（增删改查），将<code>{postList: postListReducer}</code>传给combineReducers，你会得到<code>{postList: []}</code>的store。而postListReducer也仅能处理postList部分的数据，不用关心其他字段。</p><p>源码如下（有删减）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将包含多个reducer函数的对象转换为一个reducer函数</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; reducers [description]</span></div><div class="line"><span class="comment"> * @return &#123;[type]&#125;          [description]</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</div><div class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</div><div class="line">  <span class="comment">// 将有效的reducer汇集到一个最终对象中</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</div><div class="line">    <span class="keyword">const</span> key = reducerKeys[i]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</div><div class="line">      finalReducers[key] = reducers[key]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</div><div class="line"></div><div class="line">  <span class="comment">// 最终返回一个reducer函数，接受state和action参数</span></div><div class="line">  <span class="comment">// 它会遍历每一个之前传入的reducer，每个reducer仅会改变对应key的state</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></div><div class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</div><div class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</div><div class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</div><div class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</div><div class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</div><div class="line">      <span class="comment">// 每个reducer只管自己的一亩三分地</span></div><div class="line">      nextState[key] = nextStateForKey  <span class="comment">// 计算出的state会放入对应key中去</span></div><div class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey  <span class="comment">// 这里应对可能reducer返回原来的state</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p>在你使用Redux后，我们可以通过<code>store.dispatch(ActionCreator(...))</code>的形式去分发由ActionCreator生成的action。<br>我们知道，React很适合组件式开发，那么如果我们需要在子组件中去分发action的时候该如何做呢？可以这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Child &#123;...data&#125; dispatch=&#123;store.dispatch&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//在组件内部我们可以这样调用了</span></div><div class="line"><span class="keyword">this</span>.props.dispatch(action)</div></pre></td></tr></table></figure></p><p>这样做有一个问题，如果子组件嵌套较深，那么每个组件我都要传一个dispatch下去，我们希望使用redux时透明的，能否将dispatch保存在actioncreator中，当分发action时自动带出dispatch。答案是可以的，这里我们需要借助bindActionCreators函数来绑定dispatch<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    <span class="keyword">let</span> &#123;todos, dispatch&#125; = <span class="keyword">this</span>.props</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * &#123;</span></div><div class="line"><span class="comment">     *    add<span class="doctag">Todo:</span> Function,</span></div><div class="line"><span class="comment">     *    remove<span class="doctag">Todo:</span> Function</span></div><div class="line"><span class="comment">     * &#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">let</span> boundActionCreators = bindActionCreators(TodoActionCreators, dispatch)</div><div class="line"></div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        &lt;TodoList todos=&#123;todos&#125; &#123;...boundActionCreators&#125; /&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上例摘自<a href="http://cn.redux.js.org/docs/api/bindActionCreators.html" target="_blank" rel="external">Redux文档</a>中<br>在实际应用，我么也可以用的更灵活一些，比如借助<code>react-redux</code>中connect方法</p><p>源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将dispatch绑定到actionCreator函数中</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; actionCreators actionCreator函数或者actionCreator函数对象</span></div><div class="line"><span class="comment"> * @param  &#123;[type]&#125; dispatch       [description]</span></div><div class="line"><span class="comment"> * @return &#123;[type]&#125;                [description]</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</div><div class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</div><div class="line">    <span class="keyword">const</span> key = keys[i]</div><div class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</div><div class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> boundActionCreators</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段源码是比较简单的，大致意图是进一步封装actionCreator函数，通过闭包的形式将dispatch绑定到actionCreator中。从而使子组件不需要关心dispatch参数，直接分发action</p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p>Middleware 可以让你包装 store 的 dispatch 方法来达到你想要的目的。同时， middleware 还拥有“可组合”这一关键特性。多个 middleware 可以被组合到一起使用，形成 middleware 链。其中，每个 middleware 都不需要关心链中它前后的 middleware 的任何信息。<br>源码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (...args) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> store = createStore(...args)</div><div class="line">    <span class="keyword">let</span> dispatch = store.dispatch</div><div class="line">    <span class="keyword">let</span> chain = []</div><div class="line"></div><div class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</div><div class="line">      getState: store.getState,</div><div class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</div><div class="line">    &#125;</div><div class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</div><div class="line">    dispatch = compose(...chain)(store.dispatch)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...store,</div><div class="line">      dispatch</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;何为Redux&quot;&gt;&lt;a href=&quot;#何为Redux&quot; class=&quot;headerlink&quot; title=&quot;何为Redux&quot;&gt;&lt;/a&gt;何为Redux&lt;/h1&gt;&lt;p&gt;Redux是一个为JavaScript应用设计的可预测状态容器。GitHub官网是&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM元素排序</title>
    <link href="http://yoursite.com/2017/09/29/DOM%E5%85%83%E7%B4%A0%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/09/29/DOM元素排序/</id>
    <published>2017-09-29T11:53:56.000Z</published>
    <updated>2018-02-02T07:47:03.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>如何给页面中已存在的DOM元素排序？</p><ol><li>表格中有一些数据，希望按照某些规则进行排序</li><li>父元素下的子元素排序<br>等等…</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这个问题的关键是如何以最小的代价去操作这些dom，我们都知道直接操作页面DOM是很耗时的行为，因为操作一次页面DOM就会引发<a href="/2017/12/19/重排与重绘/">重排或重绘</a>.那么如何设计解决这个问题。</p><ul><li>必须要缓存读取的DOM集合，在JS中完成排序，之后再写会页面中</li><li>最好能直接用已存在的DOM填充到父元素中，不要使用新建DOM的方式</li><li>以最少的标记来标识已存在DOM如何做移动</li></ul><h1 id="关键函数sortElements"><a href="#关键函数sortElements" class="headerlink" title="关键函数sortElements"></a>关键函数sortElements</h1><p>根据以上设想，写出以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortElements</span>(<span class="params">childs, comparator</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span>(!childs.length || <span class="keyword">typeof</span> comparator !== <span class="string">'function'</span>)&#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sort = [].sort</div><div class="line"><span class="keyword">var</span> map = [].map</div><div class="line"></div><div class="line"><span class="keyword">var</span> placements = map.call(childs,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> ownDom = item</div><div class="line"><span class="keyword">var</span> parentNode = ownDom.parentNode</div><div class="line"><span class="keyword">var</span> nextSibling = parentNode.insertBefore(</div><div class="line"><span class="built_in">document</span>.createTextNode(<span class="string">''</span>),</div><div class="line">ownDom.nextSibling</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">parentNode.insertBefore(<span class="keyword">this</span>, nextSibling)</div><div class="line">parentNode.removeChild(nextSibling)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 这里有个坑，childs其实是NodeList对象，不是真的数组，需要将它转成数组才能调用后续的sort,map</span></div><div class="line"><span class="keyword">var</span> sorted = sort.call([].slice.call(childs), comparator)</div><div class="line">map.call(sorted, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123;</div><div class="line">placements[idx].call(item)</div><div class="line">&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>comparator</code>需要用户指定，用于判断dom谁先谁后</p><p>在参考资料中列出了上面使用到的原生API</p><p>完整DEMO<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>子节点排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clickSortElement()"</span>&gt;</span>点击排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">clickSortElement</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> childDoms = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.parent li'</span>)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">sortElements(childDoms, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> aIndex = +a.getAttribute(<span class="string">'data-index'</span>)</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> bIndex = +b.getAttribute(<span class="string">'data-index'</span>)</span></div><div class="line"><span class="javascript"><span class="keyword">return</span> aIndex &gt; bIndex ? <span class="number">1</span> : <span class="number">-1</span> </span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">sortElements</span>(<span class="params">childs, comparator</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">if</span>(!childs.length || <span class="keyword">typeof</span> comparator !== <span class="string">'function'</span>)&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">return</span></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> sort = [].sort</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> map = [].map</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> placements = map.call(childs,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> ownDom = item</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> parentNode = ownDom.parentNode</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> nextSibling = parentNode.insertBefore(</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.createTextNode(<span class="string">''</span>),</span></div><div class="line"><span class="undefined">ownDom.nextSibling</span></div><div class="line"><span class="undefined">)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">parentNode.insertBefore(<span class="keyword">this</span>, nextSibling)</span></div><div class="line"><span class="undefined">parentNode.removeChild(nextSibling)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">// 这里有个坑，childs其实是NodeList对象，不是真的数组，需要将它转成数组才能调用后续的sort,map</span></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> sorted = sort.call([].slice.call(childs), comparator)</span></div><div class="line"><span class="javascript">map.call(sorted, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123;</span></div><div class="line"><span class="undefined">placements[idx].call(item)</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore" target="_blank" rel="external">insertBefore</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createTextNode" target="_blank" rel="external">createTextNode</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/removeChild" target="_blank" rel="external">removeChild</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nextSibling" target="_blank" rel="external">nextSibling</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="external">querySelectorAll</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;如何给页面中已存在的DOM元素排序？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表格中有一些数据，希望按照某些规则进行排序&lt;/li&gt;
&lt;li&gt;父元素下的子元
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Javascript真值表</title>
    <link href="http://yoursite.com/2017/09/23/Javascript%E7%9C%9F%E5%80%BC%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/09/23/Javascript真值表/</id>
    <published>2017-09-23T03:21:37.000Z</published>
    <updated>2018-02-02T07:47:29.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS真值表"><a href="#JS真值表" class="headerlink" title="JS真值表"></a>JS真值表</h1><svg id="rAndEOp" width="970" height="920"><g transform="translate(120,120)"><text class="xLabel" transform="translate(4, -4) rotate(90)" style="text-anchor: end;">null</text><text class="xLabel" transform="translate(26, -4) rotate(90)" style="text-anchor: end;">undefined</text><text class="xLabel" transform="translate(48, -4) rotate(90)" style="text-anchor: end;">false</text><text class="xLabel" transform="translate(70, -4) rotate(90)" style="text-anchor: end;">“false”</text><text class="xLabel" transform="translate(92, -4) rotate(90)" style="text-anchor: end;">Boolean(false)</text><text class="xLabel" transform="translate(114, -4) rotate(90)" style="text-anchor: end;">[]</text><text class="xLabel" transform="translate(136, -4) rotate(90)" style="text-anchor: end;">[[]]</text><text class="xLabel" transform="translate(158, -4) rotate(90)" style="text-anchor: end;">“”</text><text class="xLabel" transform="translate(180, -4) rotate(90)" style="text-anchor: end;">String(“”)</text><text class="xLabel" transform="translate(202, -4) rotate(90)" style="text-anchor: end;">0</text><text class="xLabel" transform="translate(224, -4) rotate(90)" style="text-anchor: end;">Number(0)</text><text class="xLabel" transform="translate(246, -4) rotate(90)" style="text-anchor: end;">“0”</text><text class="xLabel" transform="translate(268, -4) rotate(90)" style="text-anchor: end;">String(“0”)</text><text class="xLabel" transform="translate(290, -4) rotate(90)" style="text-anchor: end;">[0]</text><text class="xLabel" transform="translate(312, -4) rotate(90)" style="text-anchor: end;">true</text><text class="xLabel" transform="translate(334, -4) rotate(90)" style="text-anchor: end;">“true”</text><text class="xLabel" transform="translate(356, -4) rotate(90)" style="text-anchor: end;">Boolean(true)</text><text class="xLabel" transform="translate(378, -4) rotate(90)" style="text-anchor: end;">1</text><text class="xLabel" transform="translate(400, -4) rotate(90)" style="text-anchor: end;">Number(1)</text><text class="xLabel" transform="translate(422, -4) rotate(90)" style="text-anchor: end;">“1”</text><text class="xLabel" transform="translate(444, -4) rotate(90)" style="text-anchor: end;">String(“1”)</text><text class="xLabel" transform="translate(466, -4) rotate(90)" style="text-anchor: end;">[1]</text><text class="xLabel" transform="translate(488, -4) rotate(90)" style="text-anchor: end;">-1</text><text class="xLabel" transform="translate(510, -4) rotate(90)" style="text-anchor: end;">Number(-1)</text><text class="xLabel" transform="translate(532, -4) rotate(90)" style="text-anchor: end;">“-1”</text><text class="xLabel" transform="translate(554, -4) rotate(90)" style="text-anchor: end;">String(“-1”)</text><text class="xLabel" transform="translate(576, -4) rotate(90)" style="text-anchor: end;">[-1]</text><text class="xLabel" transform="translate(598, -4) rotate(90)" style="text-anchor: end;">Infinity</text><text class="xLabel" transform="translate(620, -4) rotate(90)" style="text-anchor: end;">-Infinity</text><text class="xLabel" transform="translate(642, -4) rotate(90)" style="text-anchor: end;">Object()</text><text class="xLabel" transform="translate(664, -4) rotate(90)" style="text-anchor: end;">NaN</text><text class="yLabel" transform="translate(-4, 16)" style="text-anchor: end;">null</text><text class="yLabel" transform="translate(-4, 38)" style="text-anchor: end;">undefined</text><text class="yLabel" transform="translate(-4, 60)" style="text-anchor: end;">false</text><text class="yLabel" transform="translate(-4, 82)" style="text-anchor: end;">“false”</text><text class="yLabel" transform="translate(-4, 104)" style="text-anchor: end;">Boolean(false)</text><text class="yLabel" transform="translate(-4, 126)" style="text-anchor: end;">[]</text><text class="yLabel" transform="translate(-4, 148)" style="text-anchor: end;">[[]]</text><text class="yLabel" transform="translate(-4, 170)" style="text-anchor: end;">“”</text><text class="yLabel" transform="translate(-4, 192)" style="text-anchor: end;">String(“”)</text><text class="yLabel" transform="translate(-4, 214)" style="text-anchor: end;">0</text><text class="yLabel" transform="translate(-4, 236)" style="text-anchor: end;">Number(0)</text><text class="yLabel" transform="translate(-4, 258)" style="text-anchor: end;">“0”</text><text class="yLabel" transform="translate(-4, 280)" style="text-anchor: end;">String(“0”)</text><text class="yLabel" transform="translate(-4, 302)" style="text-anchor: end;">[0]</text><text class="yLabel" transform="translate(-4, 324)" style="text-anchor: end;">true</text><text class="yLabel" transform="translate(-4, 346)" style="text-anchor: end;">“true”</text><text class="yLabel" transform="translate(-4, 368)" style="text-anchor: end;">Boolean(true)</text><text class="yLabel" transform="translate(-4, 390)" style="text-anchor: end;">1</text><text class="yLabel" transform="translate(-4, 412)" style="text-anchor: end;">Number(1)</text><text class="yLabel" transform="translate(-4, 434)" style="text-anchor: end;">“1”</text><text class="yLabel" transform="translate(-4, 456)" style="text-anchor: end;">String(“1”)</text><text class="yLabel" transform="translate(-4, 478)" style="text-anchor: end;">[1]</text><text class="yLabel" transform="translate(-4, 500)" style="text-anchor: end;">-1</text><text class="yLabel" transform="translate(-4, 522)" style="text-anchor: end;">Number(-1)</text><text class="yLabel" transform="translate(-4, 544)" style="text-anchor: end;">“-1”</text><text class="yLabel" transform="translate(-4, 566)" style="text-anchor: end;">String(“-1”)</text><text class="yLabel" transform="translate(-4, 588)" style="text-anchor: end;">[-1]</text><text class="yLabel" transform="translate(-4, 610)" style="text-anchor: end;">Infinity</text><text class="yLabel" transform="translate(-4, 632)" style="text-anchor: end;">-Infinity</text><text class="yLabel" transform="translate(-4, 654)" style="text-anchor: end;">Object()</text><text class="yLabel" transform="translate(-4, 676)" style="text-anchor: end;">NaN</text><rect y="0" x="0" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="0" x="22" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="0" x="44" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="0" x="88" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="110" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="132" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="154" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="176" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="198" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="220" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="242" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="264" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="286" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="0" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="0" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="0" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="0" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="0" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="0" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="22" x="22" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="22" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="110" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="132" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="154" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="176" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="242" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="264" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="286" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="418" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="440" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="462" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="528" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="550" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="572" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="22" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="44" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="44" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="44" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="88" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="44" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="44" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="44" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="44" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="44" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="66" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="66" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="66" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="66" x="638" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="66" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="88" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="44" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="88" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="88" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="88" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="88" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="88" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="88" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="88" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="110" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="110" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="110" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="110" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="110" x="132" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="110" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="110" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="110" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="110" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="110" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="110" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="132" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="132" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="132" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="110" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="132" x="132" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="132" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="132" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="132" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="132" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="132" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="132" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="154" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="154" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="154" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="154" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="154" x="176" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="154" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="154" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="154" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="154" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="154" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="154" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="176" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="176" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="176" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="154" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="176" x="176" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="176" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="176" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="176" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="176" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="176" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="176" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="198" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="198" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="198" x="220" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="198" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="198" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="198" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="198" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="198" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="220" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="110" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="132" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="154" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="176" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="198" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="220" x="220" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="220" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="220" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="220" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="220" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="220" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="242" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="242" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="242" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="242" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="242" x="264" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="242" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="242" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="242" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="242" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="264" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="264" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="264" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="242" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="264" x="264" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="264" x="286" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="264" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="264" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="264" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="286" x="0" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="286" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="286" x="44" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="88" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="198" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="220" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="242" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="264" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="286" x="286" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="286" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="286" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="286" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="308" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="308" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="352" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="308" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="308" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="308" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="308" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="308" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="66" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="330" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="330" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="330" x="638" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="330" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="308" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="352" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="352" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="352" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="352" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="352" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="352" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="352" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="374" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="374" x="396" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="374" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="374" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="374" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="374" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="374" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="374" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="396" x="396" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="396" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="396" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="396" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="396" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="396" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="418" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="418" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="418" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="418" x="440" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="418" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="418" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="418" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="418" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="440" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="440" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="418" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="440" x="440" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="440" x="462" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="440" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="440" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="440" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="462" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="462" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="308" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="352" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="374" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="396" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="418" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="440" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="462" x="462" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="462" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="462" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="462" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="110" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="132" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="154" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="176" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="484" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="484" x="506" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="484" x="528" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="484" x="550" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="484" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="484" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="484" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="484" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="484" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="110" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="132" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="154" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="176" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="484" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="506" x="506" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="506" x="528" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="506" x="550" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="506" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="506" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="506" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="506" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="506" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="528" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="528" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="484" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="528" x="506" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="528" x="528" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="528" x="550" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="528" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="528" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="528" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="528" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="550" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="550" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="484" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="550" x="506" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="550" x="528" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="550" x="550" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="550" x="572" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="550" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="550" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="550" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="572" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="572" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="484" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="506" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="528" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="550" width="20" height="20" style="fill: rgb(235, 108, 95);"/><rect y="572" x="572" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="572" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="572" x="638" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="572" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="0" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="44" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="88" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="198" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="220" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="308" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="352" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="374" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="396" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="484" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="506" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="594" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="594" x="616" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="594" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="594" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="0" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="44" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="88" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="110" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="132" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="154" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="176" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="198" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="220" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="242" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="264" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="286" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="308" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="352" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="374" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="396" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="418" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="440" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="462" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="484" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="506" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="528" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="550" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="572" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="594" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="616" x="616" width="20" height="20" style="fill: rgb(144, 43, 32);"/><rect y="616" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="616" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="66" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="638" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="110" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="132" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="154" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="176" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="242" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="264" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="286" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="330" width="20" height="20" style="fill: rgb(52, 152, 219);"/><rect y="638" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="418" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="440" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="462" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="528" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="550" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="572" width="20" height="20" style="fill: rgb(46, 204, 113);"/><rect y="638" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="638" x="638" width="20" height="20" style="fill: rgb(241, 196, 15);"/><rect y="638" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="0" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="22" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="44" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="66" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="88" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="110" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="132" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="154" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="176" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="198" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="220" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="242" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="264" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="286" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="308" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="330" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="352" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="374" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="396" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="418" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="440" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="462" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="484" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="506" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="528" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="550" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="572" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="594" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="616" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="638" width="20" height="20" style="fill: rgb(189, 195, 199);"/><rect y="660" x="660" width="20" height="20" style="fill: rgb(189, 195, 199);"/><g class="legend" transform="translate(722, 0)"><rect width="30" height="30" style="fill: rgb(144, 43, 32);"/><text x="40" y="18" style="text-anchor: start;">===</text></g><g class="legend" transform="translate(722, 60)"><rect width="30" height="30" style="fill: rgb(235, 108, 95);"/><text x="40" y="18" style="text-anchor: start;">==</text></g><g class="legend" transform="translate(722, 120)"><rect width="30" height="30" style="fill: rgb(241, 196, 15);"/><text x="40" y="18" style="text-anchor: start;">&gt;= &amp;&amp; &lt;=</text></g><g class="legend" transform="translate(722, 180)"><rect width="30" height="30" style="fill: rgb(46, 204, 113);"/><text x="40" y="18" style="text-anchor: start;">&gt;=</text></g><g class="legend" transform="translate(722, 240)"><rect width="30" height="30" style="fill: rgb(52, 152, 219);"/><text x="40" y="18" style="text-anchor: start;">&lt;=</text></g><g class="legend" transform="translate(722, 300)"><rect width="30" height="30" style="fill: rgb(189, 195, 199);"/><text x="40" y="18" style="text-anchor: start;">else</text></g></g></svg><h1 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等 ==="></a>严格相等 <code>===</code></h1><p>两个被比较的值在比较前都不进行隐式转换。</p><p>对于除了数值之外的值，全等操作符使用明确的语义进行比较：一个值只与自身全等。</p><p>对于数值，全等操作符使用略加修改的语义来处理两个特殊情况：</p><ul><li>第一个情况是，浮点数 0 是不分正负的。区分 +0 和 -0 在解决一些特定的数学问题时是必要的，但是大部分情况下我们并不用关心。全等操作符认为这两个值是全等的。</li><li>第二个情况是，浮点数包含了 NaN 值，用来表示某些定义不明确的数学问题的解，例如：正无穷加负无穷。全等操作符认为 NaN 与其他任何值都不全等，包括它自己。（等式 (x !== x) 成立的唯一情况是 x 的值为 NaN）</li></ul><p>各个值的严格相等结果如上图棕色块所示。与自身严格相等或与构造函数返回的值严格相等<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"123"</span> === <span class="string">"123"</span></div><div class="line"><span class="string">"123"</span> === <span class="built_in">String</span>(<span class="string">"123"</span>)</div></pre></td></tr></table></figure></p><h1 id="非严格相等"><a href="#非严格相等" class="headerlink" title="非严格相等 =="></a>非严格相等 <code>==</code></h1><p>相等操作符比较两个值是否相等，在比较前将两个被比较的值转换为相同类型。在转换后（等式的一边或两边都可能被转换），最终的比较方式等同于全等操作符 === 的比较方式。</p><p>注意图上false与其他值得非严格相等结果，<code>XXX == false</code>有以下值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[] [[]] <span class="string">""</span> <span class="built_in">String</span>(<span class="string">""</span>) <span class="number">0</span> <span class="built_in">Number</span>(<span class="number">0</span>) <span class="built_in">String</span>(<span class="string">"0"</span>) [<span class="number">0</span>]</div></pre></td></tr></table></figure></p><h1 id="逻辑“非”运算符"><a href="#逻辑“非”运算符" class="headerlink" title="逻辑“非”运算符 !"></a>逻辑“非”运算符 !</h1><p>先看看在规范中逻辑非运算符做了什么事情，<a href="http://www.ecma-international.org/ecma-262/8.0/index.html#sec-logical-not-operator" target="_blank" rel="external">在这里</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UnaryExpression:!UnaryExpression</div><div class="line">Let expr be the result <span class="keyword">of</span> evaluating UnaryExpression.</div><div class="line">Let oldValue be ToBoolean(? GetValue(expr)).</div><div class="line">If oldValue is <span class="literal">true</span>, <span class="keyword">return</span> <span class="literal">false</span>.</div><div class="line">Return <span class="literal">true</span>.</div></pre></td></tr></table></figure></p><p>清晰明了，关键运算在ToBealean函数，我们看看它<a href="http://www.ecma-international.org/ecma-262/8.0/index.html#sec-toboolean" target="_blank" rel="external">做了什么</a>：<br>它提供了一个结果表格：</p><table><thead><tr><th style="text-align:left">参数类型</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">Undefined</td><td style="text-align:left">Return false.</td></tr><tr><td style="text-align:left">Null</td><td style="text-align:left">Return false.</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">Return argument.</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">If argument is +0, -0, or NaN, return false; otherwise return true.</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">If argument is the empty String (its length is zero), return false; otherwise return true.</td></tr><tr><td style="text-align:left">Symbol</td><td style="text-align:left">Return true.</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">Return true.</td></tr></tbody></table><p>总结一下，凡是<code>undefined</code>,<code>null</code>返回false<br>凡是<code>Symbol</code>,<code>Object</code>返回true</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS真值表&quot;&gt;&lt;a href=&quot;#JS真值表&quot; class=&quot;headerlink&quot; title=&quot;JS真值表&quot;&gt;&lt;/a&gt;JS真值表&lt;/h1&gt;&lt;svg id=&quot;rAndEOp&quot; width=&quot;970&quot; height=&quot;920&quot;&gt;&lt;g transform=&quot;tran
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Karma单元测试</title>
    <link href="http://yoursite.com/2017/09/16/Karma%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/09/16/Karma单元测试/</id>
    <published>2017-09-16T06:22:56.000Z</published>
    <updated>2018-02-02T07:48:03.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Karma"><a href="#Karma" class="headerlink" title="Karma?"></a>Karma?</h1><p>Javascript 单元测试工具</p><h1 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h1><p>公司内部维护使用了一套前端底层的JS框架（简称UI），需要有完整的测试。<br>UI是运行在浏览器环境中，内部提供了一些常用的函数库，以及根据义务需要封装的UI皮肤。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.全局安装<code>karma-cli</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g karma-cli</div></pre></td></tr></table></figure></p><p>2.项目安装相关依赖<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D karma jasmine-core karma-jasmine</div></pre></td></tr></table></figure></p><h1 id="自动化单元测试"><a href="#自动化单元测试" class="headerlink" title="自动化单元测试"></a>自动化单元测试</h1><p>Karma最常用的功能就是它的自动化单元测试<br>首先在终端运行：<code>karma init</code><br>依据提示，输入一些配置参数，之后我们可以得到以下的配置文件（根目录下的<code>karma.conf.js</code>）:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Karma configuration</span></div><div class="line"><span class="comment">// Generated on Thu Nov 16 2017 11:53:28 GMT+0800 (CST)</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">  config.set(&#123;</div><div class="line"></div><div class="line">    <span class="comment">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class="line">    basePath: <span class="string">''</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// frameworks to use</span></div><div class="line">    <span class="comment">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class="line">    frameworks: [<span class="string">'jasmine'</span>],</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// list of files / patterns to load in the browser</span></div><div class="line">    files: [</div><div class="line">        <span class="string">'dist/*.min.css'</span>,</div><div class="line">        <span class="string">'dist/*.min.js'</span>,</div><div class="line">        <span class="string">'test/*.spec.js'</span></div><div class="line">    ],</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// list of files to exclude</span></div><div class="line">    exclude: [</div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">// test results reporter to use</span></div><div class="line">    <span class="comment">// possible values: 'dots', 'progress'</span></div><div class="line">    <span class="comment">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class="line">    reporters: [<span class="string">'progress'</span>],</div><div class="line"></div><div class="line">    <span class="comment">// web server port</span></div><div class="line">    port: <span class="number">9876</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// enable / disable colors in the output (reporters and logs)</span></div><div class="line">    colors: <span class="literal">true</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// level of logging</span></div><div class="line">    <span class="comment">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class="line">    logLevel: config.LOG_INFO,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// enable / disable watching file and executing tests whenever any file changes</span></div><div class="line">    autoWatch: <span class="literal">true</span>,</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// start these browsers</span></div><div class="line">    <span class="comment">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class="line">    browsers: [<span class="string">'Chrome'</span>],</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Continuous Integration mode</span></div><div class="line">    <span class="comment">// if true, Karma captures browsers, runs the tests and exits</span></div><div class="line">    singleRun: <span class="literal">false</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Concurrency level</span></div><div class="line">    <span class="comment">// how many browser should be started simultaneous</span></div><div class="line">    concurrency: <span class="literal">Infinity</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后再在根目录下运行<code>karma start</code>,karma会自动运行起Chrome浏览器，并在终端中输出测试结果。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>1.由于对mocha和chai比较熟，所以用了这两个测试框架。测试异步代码时，<code>done</code>和<code>promise</code>最好不要混用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Karma&quot;&gt;&lt;a href=&quot;#Karma&quot; class=&quot;headerlink&quot; title=&quot;Karma?&quot;&gt;&lt;/a&gt;Karma?&lt;/h1&gt;&lt;p&gt;Javascript 单元测试工具&lt;/p&gt;
&lt;h1 id=&quot;使用背景&quot;&gt;&lt;a href=&quot;#使用背景&quot; clas
      
    
    </summary>
    
    
      <category term="Karma" scheme="http://yoursite.com/tags/Karma/"/>
    
  </entry>
  
  <entry>
    <title>常用Webpack插件</title>
    <link href="http://yoursite.com/2017/09/10/%E5%B8%B8%E7%94%A8Webpack%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/09/10/常用Webpack插件/</id>
    <published>2017-09-10T07:30:21.000Z</published>
    <updated>2018-02-02T07:46:13.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-plugin"><a href="#webpack-plugin" class="headerlink" title="webpack plugin?"></a>webpack plugin?</h1><p>插件是 wepback 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！</p><p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p><p>由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    ...,</div><div class="line">    plugins:[</div><div class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h1><h2 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a><a href="https://doc.webpack-china.org/plugins/commons-chunk-plugin" target="_blank" rel="external">CommonsChunkPlugin</a></h2><p>将应用中引入的公共部分建立一个独立的文件，便于浏览器缓存公共代码。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存起来到缓存中供后续使用。</p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">    entry:&#123;</div><div class="line">        vendor: [<span class="string">'underscore'</span>, <span class="string">'jquery'</span>],</div><div class="line">        app: <span class="string">'./app'</span></div><div class="line">    &#125;,</div><div class="line">    ...,</div><div class="line">    plugins:[</div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">            name: <span class="string">'verdor'</span>,    <span class="comment">// common chunk的名称, 如上面entry中的vendor</span></div><div class="line">            filename: <span class="string">'commons.js'</span>  <span class="comment">// 为common chunk起一个新的文件名称</span></div><div class="line">            <span class="comment">// 其他options</span></div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/extract-text-webpack-plugin/" target="_blank" rel="external">ExtractTextWebpackPlugin</a></h2><p>将bundle中的文本单独抽离为独立的文件.</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install extract-text-webpack-plugin --save-dev</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: <span class="string">"style-loader"</span>,</div><div class="line">          use: <span class="string">"css-loader"</span></div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="HotModuleReplacementPlugin"><a href="#HotModuleReplacementPlugin" class="headerlink" title="HotModuleReplacementPlugin"></a><a href="https://doc.webpack-china.org/plugins/hot-module-replacement-plugin/" target="_blank" rel="external">HotModuleReplacementPlugin</a></h2><p>HMR,模块热替换插件<br><a href="https://doc.webpack-china.org/concepts/hot-module-replacement" target="_blank" rel="external">这篇教程</a>提到它的作用.</p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通常不需要设置任何属性</span></div><div class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure></p><h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/html-webpack-plugin/" target="_blank" rel="external">HtmlWebpackPlugin</a></h2><p>HtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于在文件名中包含每次会随着变异会发生变化的哈希的webpack bundle尤其有用。</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev html-webpack-plugin</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = &#123;</div><div class="line">  entry: <span class="string">'index.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">    filename: <span class="string">'index_bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>它会在<code>/dist</code>下生成一个<code>index.html</code>文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index_bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果你配合<code>ExtractTextPlugin</code>使用，它也会将抽离的单独文件放入对应位置中</p><p>具体用法访问它的<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="external">Github主页</a></p><h2 id="UglifyjsWebpackPlugin"><a href="#UglifyjsWebpackPlugin" class="headerlink" title="UglifyjsWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="external">UglifyjsWebpackPlugin</a></h2><p>代码混淆插件</p><p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev uglifyjs-webpack-plugin</div></pre></td></tr></table></figure></p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> UglifyJSPlugin()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack-plugin&quot;&gt;&lt;a href=&quot;#webpack-plugin&quot; class=&quot;headerlink&quot; title=&quot;webpack plugin?&quot;&gt;&lt;/a&gt;webpack plugin?&lt;/h1&gt;&lt;p&gt;插件是 wepback 的支柱功能。we
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>CSS Modules</title>
    <link href="http://yoursite.com/2017/08/27/CSS-Modules/"/>
    <id>http://yoursite.com/2017/08/27/CSS-Modules/</id>
    <published>2017-08-27T14:28:26.000Z</published>
    <updated>2018-02-02T07:46:57.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><p>我们在开发页面的时候，经常是需要写一些样式文件的。自从React，Vue兴起后，组件化开发日益火热。<br>组件化开发过程中，我们编程思维颗粒度更细，在写样式时，仅仅会针对这个单独组件，难免会与其他的组件样式冲突，导致重名样式覆盖。<br>比如，A组件有个<code>title</code>样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而在B组件中也有同名<code>title</code>样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当在同一页面中使用A B组件时，样式就会冲突。</p><p>那么有没有什么好的办法解决这个问题呢？</p><p>有一种css组织方式——<a href="https://en.bem.info/methodology/css/" target="_blank" rel="external">BEM</a>,为每个class起一个有意义的名称，尽可能避免重名问题。但是，它的命名过于繁琐和冗长，虽然便于管理，但是对开发者而言不够友好。</p><p>试试CSS Modules吧</p><h1 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a><a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">CSS Modules</a></h1><p>CSS Modules是一个样式文件，这个样式文件中所有样式类（class）和动画名称默认都是本地作用域的。通过模块引入的方式访问。</p><blockquote><p>注意，CSS Modules只对样式类做转换，即如果你配合webpack使用后，它会把样式类以base64形式转换。如果在CSS Modules中使用id选择器、伪类、标签选择器，它不会做任何转换</p></blockquote><p>CSS Modules引入了模块依赖和局部作用域的概念，让css文件以模块的方式引入.这与webpack的思想不谋而合，在webpack中，所以资源都是模块，并且webpack中也可以针对模块使用不同的loader处理资源。</p><p>我们先看看，CSS Module的基本内容，再看看搭配webpack如何做到css模块的引入。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>CSS Modules提倡使用驼峰式书写类名，但并不是强制的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bannerBg</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样做的原因是，如果你使用了react或者vue，那么你通过引入样式文件就一切很自然了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// For React</span></div><div class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./style.css'</span></div><div class="line"></div><div class="line">&lt;App className=&#123;style.bannerBg&#125; /&gt;</div></pre></td></tr></table></figure></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在CSS Modules中，有本地作用域和全局作用域之分，使用<code>:local()</code>和<code>:global()</code>标识，默认情况下都是本地作用域的<br>如果在全局作用域下，其他组件也可以访问到样式类名<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.normal</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 以上与下面等价 */</span></div><div class="line"><span class="selector-pseudo">:local(.normal)</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 定义全局样式 */</span></div><div class="line"><span class="selector-pseudo">:global(.btn)</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 定义多个全局样式 */</span></div><div class="line"><span class="selector-pseudo">:global</span> &#123;</div><div class="line">  .link &#123;</div><div class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">green</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">color</span>: yellow;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>允许开发者自由组合多个样式类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.className</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">  <span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">  <span class="attribute">composes</span>: className;</div><div class="line">  <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面<code>otherClassName</code>组合了<code>className</code>的属性，但自身<code>color</code>会覆盖其他类<code>className</code>的同名属性。<br><code>otherClassName</code>必须在之前声明好。</p><p>可以组合多个类<code>composes: classNameA classNameB;</code></p><p>也可以组合全局类,以及组合来自其他文件的类<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">  <span class="attribute">composes</span>: globalClassName from global;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.otherClassName</span> &#123;</div><div class="line">  <span class="attribute">composes</span>: className from <span class="string">'./another.css'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>知道了CSS Modules的内容，当然需要用它，不然学它做什么(黑人问号脸…)</p><p>我们以React为例，使用webpack进行打包。首先如果需要开启CSS Modules，我们需要在webpack中声明：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">...</div><div class="line"><span class="built_in">module</span>:&#123;</div><div class="line">    loaders: [&#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">"style-loader!css-loader?modules"</span></div><div class="line">    &#125;]</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>一个App组件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// style.css</div><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> style <span class="keyword">from</span> <span class="string">'./style.css'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        &lt;h1 className=&#123;style.title&#125;&gt;&lt;/h1&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当我们访问页面时，这个组件内部<code>h1</code>标签的变成了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"_3zyde4l1yATCOkgn-DBWEL"</span>&gt;</span></div><div class="line">  Hello World</div><div class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>h1</code>的class属性值变成了base64编码，这样就避免了样式的重名。</p><p>更多的用例，你可以看一下阮大神的博文——<a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html" target="_blank" rel="external">CSS Modules</a></p><h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><p>既然有个规范，那就有一些使用的约定，非强制性的约定，但使用后还是很有好处的。</p><ul><li>不使用选择器，只使用 class 名来定义样式</li><li>不层叠多个 class，只使用一个 class 把所有样式定义好</li><li>所有样式通过 composes 组合来实现复用</li><li>不嵌套</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">CSS Modules</a></li><li><a href="https://zhuanlan.zhihu.com/purerender/20495964" target="_blank" rel="external">CSS Modules 详解及 React 中实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h1&gt;&lt;p&gt;我们在开发页面的时候，经常是需要写一些样式文件的。自从React，Vue兴起后，组件化开发日益火热。&lt;br&gt;组件化开发过程中，我们编程思维颗
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>常用的Linux/Mac命令</title>
    <link href="http://yoursite.com/2017/08/26/%E5%B8%B8%E7%94%A8%E7%9A%84Linux-Mac%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/08/26/常用的Linux-Mac命令/</id>
    <published>2017-08-26T11:38:21.000Z</published>
    <updated>2018-02-06T10:27:18.202Z</updated>
    
    <content type="html"><![CDATA[<p>先安利一下查询Linux命令的网站——<a href="http://man.linuxde.net/" target="_blank" rel="external">Linux命令大全</a></p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep是一个强大的文本搜索命令，并将匹配的行打印出来</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">-a 不要忽略二进制数据。</div><div class="line">-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</div><div class="line">-b 在显示符合范本样式的那一行之外，并显示该行之前的内容。</div><div class="line">-c 计算符合范本样式的列数。</div><div class="line">-C&lt;显示列数&gt;或-&lt;显示列数&gt;  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</div><div class="line">-d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</div><div class="line">-e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式。</div><div class="line">-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</div><div class="line">-f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</div><div class="line">-F 将范本样式视为固定字符串的列表。</div><div class="line">-G 将范本样式视为普通的表示法来使用。</div><div class="line">-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</div><div class="line">-H 在显示符合范本样式的那一列之前，标示该列的文件名称。</div><div class="line">-i 忽略字符大小写的差别。</div><div class="line">-l 列出文件内容符合指定的范本样式的文件名称。</div><div class="line">-L 列出文件内容不符合指定的范本样式的文件名称。</div><div class="line">-n 在显示符合范本样式的那一列之前，标示出该列的编号。</div><div class="line">-q 不显示任何信息。</div><div class="line">-R/-r 此参数的效果和指定“-d recurse”参数相同。</div><div class="line">-s 不显示错误信息。</div><div class="line">-v 反转查找。</div><div class="line">-w 只显示全字符合的列。</div><div class="line">-x 只显示全列符合的列。</div><div class="line">-y 此参数效果跟“-i”相同。</div><div class="line">-o 只输出文件中匹配到的部分。</div></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>在文件中搜索一个单词，命令会返回一个包含“word”的文本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep "word" file_name</div></pre></td></tr></table></figure></p><p>在多文件中查找<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep "word" file_1 file_2 file_3 ...</div></pre></td></tr></table></figure></p><p>使用正则表达式选项：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grep -E "[1-9]+"</div><div class="line">或</div><div class="line">egrep "[1-9]+"</div></pre></td></tr></table></figure></p><p>统计文件或者文本中包含匹配字符串的行数 -c 选项：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -c "text" file_name</div></pre></td></tr></table></figure></p><p>搜索多个文件并查找匹配文本在哪些文件中：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -l "text" file1 file2 file3...</div></pre></td></tr></table></figure></p><p>在多级目录中对文本进行递归搜索：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grep "text" . -r -n</div><div class="line"><span class="meta">#</span><span class="bash"> .表示当前目录。</span></div></pre></td></tr></table></figure></p><p>在grep搜索结果中包括或者排除指定文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">只在目录中所有的.php和.html文件中递归搜索字符<span class="string">"main()"</span></span></div><div class="line">grep "main()" . -r --include=*.&#123;php,html&#125;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">在搜索结果中排除所有README文件</span></div><div class="line">grep "main()" . -r --exclude="README"</div></pre></td></tr></table></figure></p><h1 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h1><p>ifconfig命令被用于配置和显示Linux内核中网络接口的网络参数。<br>类似于Windows下的<code>ipconfig</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ifconfig</div><div class="line"></div><div class="line">// You will get it</div><div class="line">lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384</div><div class="line">options=1203&lt;RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP&gt;</div><div class="line">inet 127.0.0.1 netmask 0xff000000</div><div class="line">inet6 ::1 prefixlen 128</div><div class="line">inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1</div><div class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</div><div class="line">en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</div><div class="line">ether 8c:85:90:16:4a:94</div><div class="line">inet6 fe80::1465:130e:7d30:991a%en0 prefixlen 64 secured scopeid 0x6</div><div class="line">inet 10.249.23.139 netmask 0xffffff00 broadcast 10.249.23.255</div><div class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</div><div class="line">media: autoselect</div><div class="line">status: active</div></pre></td></tr></table></figure><p>inet后面即为IP地址</p><h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><p>对文件和目录的磁盘空间使用情况</p><p>递归查看当前目录的文件大小（单位B）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">du</div><div class="line"></div><div class="line">// output</div><div class="line">32    ./app-broker-v5/interceptor</div><div class="line">57712./app-broker-v5</div><div class="line">289472.</div></pre></td></tr></table></figure></p><p>以人类可理解的单位显示大小：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">du -h</div><div class="line"></div><div class="line">// output</div><div class="line"> 16K./app-broker-v5/interceptor</div><div class="line"> 28M./app-broker-v5</div><div class="line">141M.</div></pre></td></tr></table></figure></p><p>汇总显示当前目录总大小：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">du -sh</div><div class="line"></div><div class="line">// output</div><div class="line">141M  .</div></pre></td></tr></table></figure></p><p>计算特定文件或文件夹大小：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du file_name | dir_name</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先安利一下查询Linux命令的网站——&lt;a href=&quot;http://man.linuxde.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux命令大全&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;grep&quot;&gt;&lt;a href=&quot;#grep&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作过程中相关问题的总结</title>
    <link href="http://yoursite.com/2017/07/30/%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/07/30/工作过程中相关问题的总结/</id>
    <published>2017-07-30T08:51:57.000Z</published>
    <updated>2018-02-02T07:45:58.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20171130"><a href="#20171130" class="headerlink" title="20171130"></a>20171130</h1><h2 id="百度地图key校验未通过"><a href="#百度地图key校验未通过" class="headerlink" title="百度地图key校验未通过"></a>百度地图key校验未通过</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>今天中午，产品报出一个问题，部分经纪人用户在加载页面时，有如下的弹框报错：</p><p><img src="/img/百度地图key校验报错.jpeg" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>项目在前几天针对百度地图key进行了调整，将分散在不同页面的百度key统一通过PHP的配置完成输出，方便管理。同时key也使用了新的key，扩大流量。</p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><ol><li>首先确定百度地图的key是否正确输出，访问线上地址，打开终端查看dom后发现，百度key已经正确输出了。并且key也是正确的新key；</li><li>既然key是正确的，会不会是缓存的问题，导致用户访问的是老的key，而老key被停止了，导致用户端出现百度key不可用提示。于是让用户清空了浏览器端缓存，但仍然有这个问题；</li><li>会不会是新key的配置出问题了呢？询问用户的访问地址是什么，确认用户访问的地址是<code>vip.abc.com</code>,而我们网站的访问的地址是<code>vip.xyz.com</code>.询问后端后得知，网站可以通过两个域名访问，即<code>vip.abc.com</code>和<code>vip.xyz.com</code>。但我们之前配置百度地图key的白名单，仅配置了<code>*.xyz.com</code>，从而导致域名<code>vip.abc.com</code>未通过白名单校验。Bingo，找到了原因，随后在百度地图新key的白名单中将域名<code>*.xyz.com</code>加入后，用户端访问就正常了</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>遇到问题要冷静分析</p><h1 id="20171223"><a href="#20171223" class="headerlink" title="20171223"></a>20171223</h1><h2 id="集客家Webpack打包在Uglify中停滞"><a href="#集客家Webpack打包在Uglify中停滞" class="headerlink" title="集客家Webpack打包在Uglify中停滞"></a>集客家Webpack打包在Uglify中停滞</h2><p>在未优化之前，webpack对打包后的文件压缩混淆操作，使用到了UglifyJsPlugin插件。<br>但是在打包过程中，由于集客家中每个页面都是单独的，需要打包很多的文件，会导致阻塞</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>集客家使用的webpack版本是<code>1.15.x</code>,在这个版本中，内置了<code>webpack.optimize.UglifyJsPlugin</code>,它的版本是<a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin/tree/version-0.4" target="_blank" rel="external">0.4</a>。在这个版本中，UglifyJsPlugin还没有<code>parallel</code>和<code>cache</code>的特性。</li><li>因此Webpack提供的 UglifyJS 插件由于采用单线程压缩, 速度比较慢，甚至卡顿</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>升级UglifyJsPlugin插件，使其具有多线程和缓存的特性</li><li>升级webpack，因为在webpack2.x或3.x中内置的UglifyJsPlugin是具备以上特性的</li></ol><p>为了不影响项目的打包机制，我们采取了第一种方案去解决这个问题。我们查找到一个轮子插件去替代webpack内置的UglifyJsPlugin。 —— <a href="https://github.com/youzan/fast-uglifyjs-plugin" target="_blank" rel="external">FastUglifyJsPlugin</a>,它是对UglifyJsPlugin的改写，配合node的多线程支持来完成以上特性支持。</p><h2 id="分析FastUglifyJsPlugin原理"><a href="#分析FastUglifyJsPlugin原理" class="headerlink" title="分析FastUglifyJsPlugin原理"></a>分析FastUglifyJsPlugin原理</h2><p>首先Fast建立了cache机制，它默认指定了cache文件夹<code>.uglify</code>，存储所有打包后的js文件（为什么只存js？因为其他文件压缩仅仅是去除空格而已）。有意思的是，它以源文件js的文件哈希值（sha-1）为文件名的。<br>开始压缩时，插件运用node的<code>child_process</code>模块去fork子进程合作去压缩文件，执行单个文件压缩任务时，首先会从<code>.uglify</code>文件夹中获取已压缩文件名，用源文件js的hash值去和这些文件名比对，如果未发现，则执行这个压缩task，否则不再执行而直接读取这个文件内容作为压缩的内容（因为这个文件没有改变过）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;20171130&quot;&gt;&lt;a href=&quot;#20171130&quot; class=&quot;headerlink&quot; title=&quot;20171130&quot;&gt;&lt;/a&gt;20171130&lt;/h1&gt;&lt;h2 id=&quot;百度地图key校验未通过&quot;&gt;&lt;a href=&quot;#百度地图key校验未通过&quot; cla
      
    
    </summary>
    
    
      <category term="工作" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>结合百度地图的业务场景</title>
    <link href="http://yoursite.com/2017/07/22/%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2017/07/22/结合百度地图的业务场景/</id>
    <published>2017-07-22T10:51:58.000Z</published>
    <updated>2018-02-02T07:46:29.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这两天在做一个运用百度地图标记商铺地址的项目，现做一下总结</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>用户在一个输入框中输入地址的关键字，调用百度的<code>Autocomplete</code>接口获取联想地址列表，并展示在前端，供用户选择。<br>当用户选择一个地址后，再调用<code>LocalSearch</code>反编译地址，获得地址标点，然后在地图上标记；<br>用户也可以在地图上点击或拖拽锚点，并将结果反向至输入框中，达到联动的效果<br><img src="/img/地图联动效果.png" alt="地图联动效果"></p><h2 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h2><p>封装百度地图接口，形成组件，暴露必要的api，供业务调用</p><p>为了做到js部分代码的可移植性，尽量减少依赖。目前js部分仅依赖于jQuery。<br>页面展示和样式目前无法通用，需要依据业务自定义。可以做成模板。</p><p>组件设计：<br>内部维护地图实例对象，锚点以及自定义覆盖物。抽离业务方法完成地图交互。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.由于Autocomplete内部业务已经封装了一个，而不直接使用百度地图的Autocomplete，我们只关心其返回的结果，这里模拟了一个假的input<br>callback(cb)回调函数通过闭包形式由search完成后的onSearchComplete钩子函数调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!-- hack: 用于伪造百度Autocomplete --&gt;</div><div class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"faded_auto"</span> id=<span class="string">"faded_auto_input"</span>&gt;</div><div class="line"></div><div class="line">Flame.prototype.searchAutocomplete = <span class="function"><span class="keyword">function</span>(<span class="params">kw, cb</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>( !self._auto )&#123;</div><div class="line">            <span class="keyword">var</span> options = &#123;</div><div class="line">                input: <span class="string">'faded_auto_input'</span>,   <span class="comment">// PS: 如果不指定input, search后不会有结果返回</span></div><div class="line">                location: self.op.cityName,</div><div class="line">                onSearchComplete: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> s = [], rLen = result.getNumPois(), r</div><div class="line"></div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;rLen; i++)&#123;</div><div class="line">                        r = result.getPoi(i)</div><div class="line">                        s.push(&#123;</div><div class="line">                            business: r.business,</div><div class="line">                            address: r.city + r.district,</div><div class="line">                            province: r.province,</div><div class="line">                            city: r.city,</div><div class="line">                            district: r.district,</div><div class="line">                            street: r.street</div><div class="line">                        &#125;)</div><div class="line">                    &#125;</div><div class="line">                    cb(s)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            self._auto = <span class="keyword">new</span> BMap.Autocomplete(options)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        self._auto.search(kw)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>模拟input的原因是，项目中的Autocomplete已经个性化设置了，暂不能使用百度地图提供的Autocomplete</p><p>2.自定义覆盖物时，地图缩放会丢失覆盖物的宽高<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 缓存w,h的作用是什么？</span></div><div class="line"><span class="comment"> * 地图在缩放时，会丢失div的宽高（可能是百度地图在重绘marker时异步导致的）</span></div><div class="line"><span class="comment"> * 这里缓存一下宽高，用于正确更改样式</span></div><div class="line"><span class="comment"> */</span></div><div class="line">CustomOverlay.prototype._setOverlayPos = <span class="function"><span class="keyword">function</span>(<span class="params">p, w, h</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(w || h)&#123;</div><div class="line">        self._w = w</div><div class="line">        self._h = h</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    self._arrow.style.left = (self._w) / <span class="number">2</span> - <span class="number">8</span> + <span class="string">'px'</span></div><div class="line">    self._div.style.left = p.x - (self._w/<span class="number">2</span>) - <span class="number">2</span> + <span class="string">"px"</span></div><div class="line">    self._div.style.top  = p.y - self._h - <span class="number">25</span> + <span class="string">"px"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>丢失的主要原因在于地图在缩放的时候，地图中锚点需要重新绘制，异步的过程导致获取元素的宽高出错。<br>由于地图中锚点的文本信息不会发生变化，因此可以将上一次的宽高保存下来，然后直接使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;这两天在做一个运用百度地图标记商铺地址的项目，现做一下总结&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中的focus与focusin</title>
    <link href="http://yoursite.com/2017/07/04/jQuery%E4%B8%AD%E7%9A%84focus%E4%B8%8Efocusin/"/>
    <id>http://yoursite.com/2017/07/04/jQuery中的focus与focusin/</id>
    <published>2017-07-04T07:36:02.000Z</published>
    <updated>2018-02-02T07:47:42.205Z</updated>
    
    <content type="html"><![CDATA[<p>关于focus与focusin的区别<br>敬请期待</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于focus与focusin的区别&lt;br&gt;敬请期待&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS模板引擎</title>
    <link href="http://yoursite.com/2017/06/25/JS%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://yoursite.com/2017/06/25/JS模板引擎/</id>
    <published>2017-06-25T09:54:01.000Z</published>
    <updated>2018-02-02T07:47:50.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的几种JS模板引擎"><a href="#常见的几种JS模板引擎" class="headerlink" title="常见的几种JS模板引擎"></a>常见的几种JS模板引擎</h1><h2 id="ArtTemplate"><a href="#ArtTemplate" class="headerlink" title="ArtTemplate"></a>ArtTemplate</h2><p>High performance JavaScript templating engine <a href="https://aui.github.io/art-template/" target="_blank" rel="external">https://aui.github.io/art-template/</a></p><p>性能<br><img src="/img/arttemplate性能图.png" alt=""></p><p>标准语法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;if user&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure></p><p>原始语法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">user</span>) &#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">user.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p><p>渲染模板<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</div><div class="line"><span class="keyword">var</span> html = template(__dirname + <span class="string">'/tpl-user.art'</span>, &#123;</div><div class="line">    user: &#123;</div><div class="line">        name: <span class="string">'aui'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><a href="http://aui.github.io/art-template/zh-cn/" target="_blank" rel="external">中文文档</a></p><h2 id="Swig"><a href="#Swig" class="headerlink" title="Swig"></a>Swig</h2><p>Swig is an awesome, Django/Jinja-like template engine for node.js.<br><a href="https://github.com/paularmstrong/swig/" target="_blank" rel="external">项目地址</a></p><p>创建模板<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; pagename|title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">&#123;% for author in authors %&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">li&#123;%</span> <span class="attr">if</span> <span class="attr">loop.first</span> %&#125; <span class="attr">class</span>=<span class="string">"first"</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span></div><div class="line">    &#123;&#123; author &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;% endfor %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p><p>渲染模板<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> swig  = <span class="built_in">require</span>(<span class="string">'swig'</span>);</div><div class="line">swig.renderFile(<span class="string">'/path/to/template.html'</span>, &#123;</div><div class="line">    pagename: <span class="string">'awesome people'</span>,</div><div class="line">    authors: [<span class="string">'Paul'</span>, <span class="string">'Jim'</span>, <span class="string">'Jane'</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>渲染结果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Awesome People<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>Paul<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Jim<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Jane<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p><p>语法偏向于python，和JavaScript有点不符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见的几种JS模板引擎&quot;&gt;&lt;a href=&quot;#常见的几种JS模板引擎&quot; class=&quot;headerlink&quot; title=&quot;常见的几种JS模板引擎&quot;&gt;&lt;/a&gt;常见的几种JS模板引擎&lt;/h1&gt;&lt;h2 id=&quot;ArtTemplate&quot;&gt;&lt;a href=&quot;#ArtTem
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS的单线程与异步</title>
    <link href="http://yoursite.com/2017/06/18/JS%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2017/06/18/JS的单线程与异步/</id>
    <published>2017-06-18T06:41:56.000Z</published>
    <updated>2018-02-02T07:47:57.344Z</updated>
    
    <content type="html"><![CDATA[<p>我们常说JavaScript是单线程的，那么应该怎么来认识这句话呢？它和异步又是什么关系呢？</p><h1 id="单线程与异步"><a href="#单线程与异步" class="headerlink" title="单线程与异步"></a>单线程与异步</h1><p>在一门语言中，单线程和异步是自相矛盾的。JS本身是单线程的，那么它就不是异步。但是，万事都有个但是，它的宿主环境是多线程的。JS常见的宿主环境是浏览器或Node端，宿主环境让JS通过某种方式（事件驱动）拥有了异步的行为。因为事件驱动让JS的机制非常简单高效。</p><h1 id="浏览器宿主"><a href="#浏览器宿主" class="headerlink" title="浏览器宿主"></a>浏览器宿主</h1><p>在各个宿主环境中，仅仅分配一个主线程给JS引擎去执行任何或函数，且一次只能执行一个任务。那么在浏览器里充满很多不同任务，且大多任务是非常耗时的，比如网络请求，定时器和事件监听。如果只让一个线程去完成的话，显然很容易阻塞。因此浏览器为这些耗时任务开辟了另外的线程，主要包括http请求线程，浏览器定时触发器，浏览器事件触发线程。如下图：<br><img src="/img/JS宿主浏览器环境.jpg" alt=""><br>浏览器内存常驻线程：</p><ul><li>浏览器 GUI 渲染线程</li><li>JavaScript 引擎线程</li><li>浏览器定时触发器线程</li><li>浏览器事件触发线程</li><li>浏览器 http 异步请求线程</li></ul><h1 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h1><p>那既然只有一个主线程在跑JS引擎，那么其他线程的任务完成后如何通知主线程呢？答案是回调函数，整个程序都是事件驱动的，每个事件都会绑定一个回调函数，比如如下的定时器任务：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'定时结束'</span>)</div><div class="line">&#125;, <span class="number">50</span>)</div></pre></td></tr></table></figure></p><p>首先JS主线程读取到setTimeout，会将这个任务交给浏览器定时触发器异步执行，当50ms过去后，浏览器定时触发器会再将回调函数重新压入任务队列的最后。其他异步任务也是如此，整个程序就是依靠这样一个个事件驱动起来的。所以说，JS一直都是单线程的，而浏览器才是实现异步的真正“主谋”</p><h1 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h1><p>上面我们说到了三个东西：JS主线程、任务队列、浏览器多线程。那么它们之间有什么关系呢？下面的图可以看出它们的关系：<br><img src="/img/JS主线程任务队列.jpg" alt=""><br>(图片摘自Philip Roberts的演讲《Help, I’m stuck in an event-loop》)<br>图片中<code>heap+stack</code>构成JS引擎主线程，<code>callback queue</code>是任务队列，<code>Web APIs</code>则是上面提到的浏览器异步任务线程。<br>函数的执行就是通过进栈和出栈实现的，比如图中有一个foo()函数，主线程把它推入栈中，在执行函数体时，发现还需要执行上面的那几个函数，所以又把这几个函数推入栈中，等到函数执行完，就让函数出栈。等到stack清空时，说明一个任务已经执行完了，这时就会从callback queue中寻找下一个人任务推入栈中（这个寻找的过程，叫做event loop，因为它总是循环的查找任务队列里是否还有任务）。</p><h1 id="如何利用异步"><a href="#如何利用异步" class="headerlink" title="如何利用异步"></a>如何利用异步</h1><p>浏览器维护了五个常驻线程，那么我们是否可以利用一下呢？答案是可以的，比如我们书写的同步代码是一个比较耗时的，比如遍历一个很大的数组，那么可以利用：</p><ul><li><p>定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// f1是一个非常耗时的过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// f1 的代码</span></div><div class="line">        callback();</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">f1(f2);</div></pre></td></tr></table></figure></li><li><p>事件触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery可以为dom元素绑定自定义事件，而这个事件是由事件触发线程完成的</span></div><div class="line">$f1.on(<span class="string">'custom'</span>,f2);  <span class="comment">//这里绑定事件以jQuery写法为例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// f1的代码</span></div><div class="line">        $f1.trigger(<span class="string">'custom'</span>);</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><p>Q:ajax请求是不是异步的？<br>A:从上面我们知道，浏览器会为http请求单独开辟线程处理，因此ajax请求是异步的</p><p>Q:界面渲染线程与JS主线程的关系<br>A:界面渲染线程与JS主线程是互斥的，主线程在执行时，界面渲染线程就会被挂起。<br>在执行<script>中内容时，浏览器会切换到JavaScript引擎所在的线程，此时渲染引擎所在的线程会阻塞，故其后元素的解析和渲染会暂停。把<script>放到紧跟</body>之前的位置。这样就不会影响需要放到页面上的UI元素的解析了。这样的好处就是，用户能即使看到页面上的UI元素，而防止出现了浏览器白屏等现象。</p><p>Q:静态资源和动态资源<br>A:一般而言，html中通过script定义的资源属于静态资源，这些资源的请求会阻塞dom树的构建。而通过js的createElement方法塞入到html中的资源属于动态资源，这种资源的请求并不会阻塞浏览器的渲染（因为塞入到dom的script标签的async属性是true）。因此如果资源可以异步获取，就可以通过动态资源的形式加载。</p><p>参考资料：</p><ul><li>JavaScript的单线程和异步: <a href="https://zhuanlan.zhihu.com/p/23659122">https://zhuanlan.zhihu.com/p/23659122</a></li></ul></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们常说JavaScript是单线程的，那么应该怎么来认识这句话呢？它和异步又是什么关系呢？&lt;/p&gt;
&lt;h1 id=&quot;单线程与异步&quot;&gt;&lt;a href=&quot;#单线程与异步&quot; class=&quot;headerlink&quot; title=&quot;单线程与异步&quot;&gt;&lt;/a&gt;单线程与异步&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
</feed>
